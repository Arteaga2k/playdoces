h1. Play モジュール

Play アプリケーションは、いくつかのアプリケーションモジュールから組み立てることができます。これにより、複数のアプリケーションをまたいでアプリケーションコンポーネントを再利用したり、大きなアプリケーションをいくつかの、より小さなアプリケーションに分割することが可能です。

h2. <a name="what">モジュールとは?</a>

モジュールは、ただの play アプリケーションです; しかし、アプリケーションモジュールのリソースがロードされる方法にいくつかの違いがあります:

* モジュールには **conf/application.conf** ファイルがありません。
* モジュールは **conf/routes** ファイルを持つことができますが、これらのルートは自動的にはロードされません。
* すべてのファイルは、まずメインのアプリケーションパスから検索され、その後、すべてのロードされたモジュールから検索されます。
* モジュールは module/lib ディレクトリ に JAR ファイルとしてパッケージされたピュア Java コードを含むことができます。
* モジュールはドキュメントを含むことができます。
* モジュールにおいて、すべてが任意です。

**play new-module** コマンドでモジュールを作成することができます。

h2. <a name="loading">アプリケーションからモジュールをロードするには</a>

モジュールは、アプリケーションの */modules* ディレクトリから自動的にロードされます。"依存性管理システム":dependency を使って自動的にアプリケーションのモジュールを管理することができます。

h2. <a name="routes">モジュールからデフォルトルートをロードする</a>

モジュールはデフォルトルートファイルを提供することができます。特別なルート宣言を使用することで、メインアプリケーションの routes ファイルにこれをロードすることができます:

bc. # Import the default CRUD routes
GET     /admin	     module:crud

すべての利用可能なモジュールからルートをロードすることもできます:

bc. GET     /	     module:*

h2. <a name="documentation">モジュールにドキュメントを追加する</a>

モジュールに **documentation/manual/home.textile** ファイルを追加するだけで、モジュールにドキュメントを追加することができます。 **${play.path}/documentation/manual/** にある Play 自身のドキュメントと同じ Textile 文法を使ってください。

ドキュメントを持つひとつまたはそれ以上のモジュールを使って Play アプリケーションを実行している場合、 "http://localhost:9000/@documentation":http://localhost:9000/@documentation にあるローカルの Play ドキュメントは、サイドバーの *Installed Modules* の下にそれらドキュメントへのリンクを含みます。

h2. <a name="repository">モジュールリポジトリの使用</a>

"モジュールリポジトリ":http://www.playframework.org/modules は、コミュニティによって寄付されたすべてのモジュールを識別します。モジュールはいくつかのバージョンを持つことができます。使用するフレームワークのバージョンに必要なのはどのバージョンのモジュールなのか、モジュールのドキュメントをチェックする必要があります。

**play list-modules** コマンドを使ってモジュールリポジトリを閲覧することもできます。

bc. gbo-mac:‾ guillaume$ play list-modules
‾        _            _ 
‾  _ __ | | __ _ _  _| |
‾ | '_ ¥| |/ _' | || |_|
‾ |  __/|_|¥____|¥__ (_)
‾ |_|            |__/   
‾
‾ play! 1.2, http://www.playframework.org
‾
‾ You can also browse this list online at http://www.playframework.org/modules
‾
‾ [bespin]
‾   Bespin online editor
‾   http://www.playframework.org/modules/bespin
‾   Versions: 1.0, 1.0.1
‾
‾ [cobertura]
‾   Cobertura
‾   http://www.playframework.org/modules/cobertura
‾   Versions: 1.0
...

**play install {module}-{version}** コマンドを使ってローカルにモジュールをインストールすることができます。ローカルにモジュールをインストールすると、いくつかのアプリケーションがそれぞれ個別のコピーをインストールすることなく、このモジュールを使えるようになります。これは、アプリケーションの拡張というよりも、フレームワークを拡張するような大きなモジュールについて有効です。

例えば、フレームワークに Scala サポートをインストールする場合、以下を使います:

bc. play install scala-head

規約では、 **head** バージョンのモジュールは不安定です。バージョン情報を省略することで、デフォルトバージョンのモジュールをインストールすることもできます。例えば、以下のようにします:

bc. play install scala

この方法の場合、モジュールはフレームワークをインストールした場所の **/modules** ディレクトリにインストールされます。

**--path** オプションを使ってこのインストールパスを変更することができます:

bc. play install gwt --path=my-project

h2. <a name="contributing">モジュールリポジトリに新しいモジュールを寄付する</a>

まず最初に、OpenID が必要です。OpenID は、あなたをモジュールの作者として認証する手助けになります。その後、Google Group でモジュール登録のリクエストを送ってください。

以下を連絡してください:

* モジュールに関する詳しい情報。どのようなモジュールですか?
* モジュールの名前。 @[a-zA-Z]+@ の正規表現にマッチしなければなりません。
* モジュールの短い概要
* プロジェクトホームページ
* OpenID
* モジュールは、ソースコードが利用可能で、かつバグを報告できるどこかで管理されていなければなりません。適当な場所を知らないのであれば、github、Google Code、または launchpad が良い選択肢です。

モジュールをリリースするには、単に play build-module コマンドを使用してください。そして、モジュールリポジトリに接続して、生成されたパッケージをアップロードしてください。

もちろん、ヘルプを提供したり情報を共有するために公式の Google Group を使用することができます。


p(note). **考察を続けます**
 
%(next)"依存性管理":dependency% を使ってモジュールを効率的に管理する方法を学びましょう。
