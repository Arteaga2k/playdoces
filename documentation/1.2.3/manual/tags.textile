h1. Tags de plantilla incorporados

Estos son los tags incorporados que están disponibles además de los mostrados en "la sintaxis del sistema de plantillas":templates#syntax.

p(note). Existe un manual aparte de "las extensiones Java":javaextensions%.


h2. <a name="a">a</a>

El tag @a@ inserta un enlace HTML que apunta a la acción de un controlador.

bc. #{a @Application.logout()}Disconnect#{/a}

Cuyo resultado es:

bc. <a href="/application/logout">Disconnect</a>

Si la acción que intenta llamar no tiene una ruta capaz de invocarla usando el método GET, Play generará automáticamente un formulario oculto que será enviado usando JavaScript al hacer clic en el enlace.


h2. <a name="authenticityToken">authenticityToken</a>

Despliega un campo de entrada oculto que contiene una clave generada que puede usar en cualquier formulario, para prevenir el "Cross-Site Request Forgery":security#csrf

bc. #{authenticityToken /}

El resultado es:

bc. <input type="hidden" name="authenticityToken"
       value="1c6d92fed96200347f06b7c5e1a3a28fa258ef7c">


h2. <a name="cache">cache</a>

Almacena en cache el cuerpo del tag usando la API @play.cache.Cache@, con la clave de cache especificada en el parámetro del tag.

bc. #{cache 'startTime'}
   ${new java.util.Date()}
#{/cache}

Por defecto, el cuerpo es almacenado en cache indefinidamente, pero puede especificar un tiempo de expiración con el parámetro @for@.

bc. #{cache 'currentTime', for:'3s'}
   ${new java.util.Date()}
#{/cache}


h2. <a name="dolayout">doLayout</a>

Usado en herencia de plantillas, este tag inserta el contenido evaluado de la subplantilla.

bc. <!-- common header here -->
<div id="content">
    #{doLayout /}
</div>
<!-- common footer here -->


h2. <a name="else">else</a>

Por supuesto se usa junto con el tag @if@.

bc. #{if user}
    Connected user is ${user}
#{/if}
#{else}
    Please log in
#{/else}

No obstante, también puede usarlo junto con el tag @list@ y se ejecutará si la lista está vacía.

bc. #{list items:task, as:'task'}
    <li>${task}</li>
#{/list}
 
#{else}
    Nothing to do...
#{/else}


h2. <a name="elseif">elseif</a>

bc. #{if tasks.size() > 1}
    Busy tasklist
#{/if}
 
#{elseif tasks}
    One task on the list
#{/elseif}
 
#{else}
    Nothing to do
#{/else}

Al igual que @else@, puede usarlo con el tag @list@.


h2. <a name="error">error</a>

Muestra los mensajes de error de validación, si los hay, para el campo especificado en el parámetro del tag.

bc. #{error 'user.name'/}

Puede usar el parámetro opcional @field@  para usar el mensaje de error de un campo diferente. Esto es útil cuando desea que varios campos compartan un mensaje de error común.

bc. #{error 'contact.street',  field:'contact.address'/}
#{error 'contact.city',    field:'contact.address'/}
#{error 'contact.country', field:'contact.address'/}


h2. <a name="errorClass">errorClass</a>

Imprime el texto @hasError@ si hay un error de validación en el campo cuyo nombre fue pasado como parámetro del tag. Esto es de utilidad para asignar una clase CSS a los campos de entrada con errores:

bc. <input name="name" class="#{errorClass 'name'/}">

Lo cual es equivalente a:

bc. <input name="name" class="${errors.forKey('name') ? 'hasError' : ''}">


h2. <a name="errors">errors</a>

Itera a través de los errores de validación actuales.

bc. <ul>
#{errors}
    <li>${error}</li>
#{/errors}
</ul>

El tag define variables implícitas en su cuerpo.

* @error@, el error 
* @error_index@, el índice del error, comenzando en 1
* @error_isLast@, vale @true@ cuando está en el último elemento
* @error_isFirst@, vale @true@ cuando está en el primer elemento
* @error_parity@, alterna su valor entre @odd@ (impar) y @even@ (par)

bc. <table>
<tr><th>#</th><th>Error</th></tr>
#{errors}
    <tr class="${error_parity}"><td>${error_index}</td><td>${error}</td></tr>
#{/errors}
</table>

También puede usar el parámetro opcional @field@, o solo dejarlo como parámetro por defecto, para iterar únicamente los errores pertenecientes a un campo específico.

bc. <ul>
#{errors 'myField'}
    There where errors with the field myField<br />
    <li>${error}</li>
#{/errors}
</ul>


h2. <a name="extends">extends</a>

Hace que una plantilla herede de otra.

bc. #{extends 'main.html' /}


h2. <a name="field">field</a>

El tag @field@ es un _helper_, basado en el lema "No se repita a usted mismo". Funciona de esta manera:

En vez de escribir esto:

bc. <p>
  <label>&{'user.name'}</label>
  <input type="text" id="user_name" name="user.name" value="${user?.name}" class="${errors.forKey('user.name') ? 'has_error' : ''}">
  <span class="error">${errors.forKey('user.name')}</span>
</p>

Usted puede solo escribir:

bc. #{field 'user.name'}
<p>
  <label>&{field.name}</label>
  <input type="text" id="${field.id}" name="${field.name}" value="${field.value}" class="${field.errorClass}">
  <span class="error">${field.error}</span>
</p>
#{/}

Así usted no repite @user.name@ una y otra vez.


h2. <a name="form">form</a>

Inserta un tag @form@. Play determinará el método HTTP a partir de la ruta, usando POST como método por defecto. Si existen ambas rutas, POST y GET, configuradas para la URL, el tag usará por defecto la primera ruta definida en @routes@. 

Parámetros opcionales:

* @method@ - puede tener el valor @POST@ o @GET@.
* @id@ - establece un ID para el elemento @form@.
* @enctype@ - establece la codificación de los datos del formulario. Por defecto es ‘application/x-www-form-urlencoded’.

La codificación de caracteres siempre es **utf-8**.

bc. #{form @Client.details(), method:'GET', id:'detailsForm'}
   ...
#{/form}

Da como resultado lo siguiente:

bc. <form action="/client/details" id="detailsForm" method="GET"
      accept-charset="utf-8">
 ...
</form>

También puede especificar una entidad como objetivo del método de la acción:

bc. #{form @Client.details(client.id)}
   ...
#{/form}

El nombre del parámetro HTTP se obtiene de la declaración del método de la acción. 

bc. public static void details(String clientId){
       // ...
}

Play creará una URL de acción con @clientId@:

bc. <form action="/client/details?clientId=3442" method="GET"
      accept-charset="utf-8">
 ...
</form>

El tag @form@ también incluye automáticamente una "clave de autenticidad":#authenticityToken, para los métodos diferentes de GET.

bc. #{form @Client.create(), method:'POST', id:'creationForm',
       enctype:'multipart/form-data' }
   ...
#{/form}

Da como resultado:

bc. <form action="/client/create" id="creationForm" method="POST"
      accept-charset="utf-8" enctype="multipart/form-data">
<input type="hidden" name="authenticityToken" 
       value="1c6d92fed96200347f06b7c5e1a3a28fa258ef7c">
 ...
</form>

Si su formulario actualiza un recurso en el lado del servidor, usted _debería_ usar el método **POST**. Si su formulario se usa para filtrar datos y no actualiza su dominio, usted puede usar GET. Por favor lea acerca de "idempotence (idempotencia)":http://en.wikipedia.org/wiki/Idempotence. POST no es idempotente, mientras que GET, PUT y DELETE sí lo son.


h2. <a name="get">get</a>

Recupera un valor definido con un tag "set":#set. Puede usar el mecanismo get/set para intercambiar valores entre plantillas, _layouts_ y subplantillas.

bc. <head>
    <title>#{get 'title' /}
</head>

También puede usar el tag @get@ de la siguiente manera, la cual mostrará "Homepage" si @'title'@ no ha sido especificado.

bc. <head>
    <title>#{get 'title'}Homepage #{/} 
</head>

h2. <a name="i18n">i18n</a>

Exporta mensajes localizados dentro de JavaScript. Los mensajes localizados estarán disponibles en su código JavaScript al usar la función @i18n()@.

Defina sus traducciones en el archivo @conf/messages@.

bc. hello_world=Hello, World !
hello_someone=Hello %s !

Incluya los mensajes en su plantilla (o _layout_):

bc. #{i18n /}

Y obtenga las claves desde JavaScript:

bc. alert(i18n('hello_world'));
alert(i18n('hello_someone', 'John'));

Opcionalmente, puede restringir el tag a solo algunos mensajes. Se acepta el uso del caracter comodín @*@ al final del nombre del tag:

bc. #{i18n keys:['title', 'menu.*'] /}

h2. <a name="if">if</a>

Evalúa la prueba dada, y si resulta verdadera, ejecuta el cuerpo del tag.

bc. #{if user.countryCode == 'en' }
    Connected user is ${user}
#{/if}

Usando condiciones compuestas:

bc. #{if ( request.actionMethod == 'administer'  && user.isAdmin() ) }
    You are admin, allowed to administer.
#{/if}


h2. <a name="iferror">ifError</a>

Interpreta el cuerpo del tag si hay un error de validación en el campo de entrada especificado en el parámetro del tag.

bc. #{ifError 'user.name'}
  <p>
    User name is invalid: 
    #{error 'user.name' /}
  <p>
#{/ifError}

h2. <a name="iferrors">ifErrors</a>

Interpreta el cuerpo del tag si cualquier campo tiene un error de validación.

bc. #{ifErrors}
  <p>Error(s) found!</p>
#{/ifErrors}

h2. <a name="ifnot">ifnot</a>

Alternativa más limpia que @#{if !condition}@

bc. #{ifnot tasks}
    No tasks today
#{/ifnot}


h2. <a name="include">include</a>

Incluye otra plantilla. Todas las variables de la plantilla actual estarán disponibles de forma directa en la plantilla incluida.

bc. <div id="tree">
    #{include 'tree.html' /}
</div>


h2. <a name="jsaction">jsAction</a>

El tag @#{jsAction /}@ devuelve una función JavaScript que construye una URL basada en una acción del servidor y variables libres. Este tag no realiza solicitudes AJAX; estas tienen que hacerse manualmente usando la URL devuelta.

Veamos un ejemplo:

bc. GET     /users/{id}        Users.show

Ahora puede importar esta ruta en el lado del cliente:

bc. <script type="text/javascript">
    var showUserAction = #{jsAction @Users.show(':id') /}
    
    var displayUserDetail = function(userId) {
        $('userDetail').load( showUserAction({id: userId}) )
    }
</script>


h2. <a name="jsroute">jsRoute</a>

El tag @#{jsRoute /}@ funciona de forma similar al tag @#{jsAction /}@, este devuelve un objeto que contiene: la función que construye la URL basada en la acción del servidor, y el correspondiente método HTTP (GET, POST, etc.).

Ejemplo:

bc. PUT     /users/{id}        Users.update

Luego, en la plantilla:

bc. <script type="text/javascript">
    var updateUserRoute = #{jsRoute @Users.update(':id') /}
    $.ajax({
      url: updateUserRoute.url({id: userId}),
      type: updateUserRoute.method,
      data: 'user.name=Guillaume'
    });
</script>


h2. <a name="list">list</a>

Itera a través de una colección de objetos.

bc. <ul>
#{list items:products, as:'product'}
    <li>${product}</li>
#{/list}
</ul>

El tag define variables implícitas en su cuerpo. El nombre de las variables lleva como prefijo el nombre de la variable del ciclo.

* @name_index@, el índice del elemento, comenzando en 1
* @name_isLast@, vale @true@ cuando está en el último elemento
* @name_isFirst@, vale @true@ cuando está en el primer elemento
* @name_parity@, alterna entre los valores @odd@ (impar) y @even@ (par)

bc. <ul>
#{list items:products, as:'product'}
    <span class="${product_parity}">${product_index}. ${product}</span>
    ${product_isLast ? '' : '-'}
#{/list}
</ul>

El parámetro @items@ es opcional y puede ser reemplazado por el argumento por defecto @arg@.

Por lo que puede reescribir:

bc. #{list items:users, as:'user'}
    <li>${user}</li>
#{/list}

así:

bc. #{list users, as:'user'}
    <li>${user}</li>
#{/list}

Los ciclos **for** son fáciles de crear usando el objeto **range** de Groovy:

bc. #{list items:0..10, as:'i'}
    ${i}
#{/list}

bc. #{list items:'a'..'z', as:'letter'}
    ${letter} ${letter_isLast ? '' : '|' }
#{/list}

El parámetro @as@ es también opcional. El tag usa @_@ como nombre por defecto de la variable:

bc. #{list users}
    <li>${_}</li>
#{/list}


h2. <a name="option">option</a>

Inserta un tag @option@ en la plantilla.

* @value@ - valor de la opción

bc. #{option user.id} ${user.name} #{/option}

Mostrará lo siguiente:

bc. <option value="42">jto</option>

h2. <a name="script">script</a>

Inserta un tag @script@ en la plantilla. Por convención, el tag hace referencia a un script en el directorio @/public/javascripts@

* @src@ (obligatorio) - nombre del archivo que contiene el script, sin incluir el @/public/javascripts@ en el nombre
* @id@ (opcional) - un valor para el atributo @id@ del tag @script@ generado
* @charset@ (opcional) - establece la codificación de caracteres del código fuente - por defecto es UTF-8

El parámetro @src@ puede ser reemplazado por el argumento por defecto @arg@.

bc. #{script 'jquery-1.4.2.min.js' /}
#{script id:'datepicker' , src:'ui/ui.datepicker.js', charset:'utf-8' /}


h2. <a name="render">render</a>

Reproduce la plantilla especificada por la ubicación pasada como parámetro del tag. La ubicación puede ser absoluta, o relativa a @/app/views@

bc. #{render 'Application/other.html'/}


h2. <a name="select">select</a>

Inserta un tag @select@ en la plantilla.

* @name@ (obligatorio) - establece el nombre del elemento @select@.

Cualquier atributo desconocido será considerado un atributo HTML, e interpretado "tal como viene".

bc. #{select 'booking.beds', value:2, id:'select1'}
    #{option 1}One king-size bed#{/option}
    #{option 2}Two double beds#{/option}
    #{option 3}Three beds#{/option}
#{/select}

Dará como resultado:

bc. <select name="booking.beds" size="1" id="select1" >
  <option value="1">One king-size bed</option>
  <option value="2" selected="selected">Two double beds</option>
  <option value="3">Three beds</option>
</select>


Este tag puede generar opciones usando el atributo @items@.

* @items@ (opcional) - lista de objetos, usado para crear elementos @option@
* @value@ (opcional) - elemento de @items@ seleccionado (note que la selección múltiple no está soportada)
* @labelProperty@ (opcional) - para cada item, propiedad a usar como etiqueta del @option@
* @valueProperty@ (opcional) - para cada item, propiedad a usar como valor del @option@. Se usa por defecto la propiedad @id@

p(note). Los atributos @labelProperty@ and @valueProperty@ no deberían ser valores primitivos. Así que, por ejemplo, use una variable @Integer@ o @Long@ en vez de una @int@ o @long@.

Por ejemplo, dada una lista de objetos @User@, cada uno con una propiedad @name@:

bc. #{select 'users', items:users, valueProperty:'id', labelProperty:'name', value:5, class:'test', id:'select2' /}

Dará como resultado:

bc. <select name="users" size="1" class="test" id="select2" >
  <option value="0" >User-0</option>
  <option value="1" >User-1</option>            
  <option value="2" >User-2</option>            
  <option value="3" >User-3</option>
  <option value="4" >User-4</option>
  <option value="5" selected="selected">User-5</option>
</select>

h2. <a name="set">set</a>

Define un valor que puede ser recuperado en la misma plantilla o en cualquier _layout_ con el tag @get@.

bc. #{set title:'Admin' /}
#{set style:'2columns' /}

También puede hacer uso de variables:

bc. #{set title:'Profile of ' + user.login /}

Puede definir el valor de las variables en el cuerpo:

bc. #{set 'title'}
    Profile of ${user.login}
#{/set}


h2. <a name="stylesheet">stylesheet</a>

Inserta un tag @link@ en la plantilla. Por convención, el tag hace referencia a un archivo CSS en el directorio @/public/stylesheets@

* @src@ (obligatorio) - nombre del archivo, sin incluir el camino inicial @/public/stylesheets@ en la ubicación
* @id@ (opcional) - un valor para el atributo @id@ del tag @link@ generado
* @media@ (opcional) - un valor para el atributo @media@: _screen_, _print_, _aural_, _projection_…
* @title@ (opcional) - el valor del atributo @title@ (o descripción)

El parámetro @src@ puede ser reemplazado por el argumento por defecto @arg@.

bc. #{stylesheet 'default.css' /}
#{stylesheet id:'main', media:'print', src:'print.css', title:'Print stylesheet' /}


h2. <a name="verbatim">verbatim</a>

Deshabilita el uso de _escapes_ en las salidas HTML de la plantilla, tal como la extensión Java "raw()":javaextensions#arawa, pero en todo el cuerpo del tag.

bc. ${'&amp;'}
#{verbatim}${'&amp;'}#{/verbatim}

En este ejemplo, la primera línea muestra @&amp;@ en la página mientras que la segunda línea muestra el caracter ampersand.

