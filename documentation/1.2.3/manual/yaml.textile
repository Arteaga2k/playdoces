p(note). Esta página todavía no ha sido traducida al castellano. Si quieres colaborar con nosotros y ayudar con la traducción lee nuestra "guía para colaborar con la traducción de play":translation.

h1. YAML

h2. <a name="syntax">Sintaxis YAML</a>

En las pruebas de las aplicaciones, comunmente, se utilizan estructuras de datos que consisten en un modelo de objetos relacionados los cuales pueden ser tediosos de crear programaticamente con Java. Play incluye un parser "YAML":http://en.wikipedia.org/wiki/YAML que hace esta tarea sumamente sencilla.

Crear en el directorio @conf@ un archivo YAML como el siguiente:

bc.. City(capitalfederal):
    name: Capital Federal
    state: Buenos Aires

User(john):
    name: "John Smith"
    email: john@john.com
    lang: es
    created: 2007-01-01

User(frank):
    name: "Frank Franken"
    email: frank@frank.com
    lang: en
    created: 2007-08-05

Neighborhood(villalugano):
    name: Villa Lugano
    city: capitalfederal
    tags: "shopping, cafes"
    users: [john, frank]

Neighborhood(coghlan):
    name: Coghlan
    city: capitalfederal
    tags: "cafes, bars"
    users: [john]

p. La sintaxis que utiliza Play para los archivos YAML varía ligeramente de la estandar. Cada parrafo debe comenzar con el nombre de la clase del modelo (por ejemplo @Neighborhood@) seguido de un identificador entre parentesis (por ejemplo @villalugano@), el cual se podra utilizar para referenciar el objeto dentro del archivo. Esto es diferente a la sintaxis estandar para archivos YAML, en la cual se usa el ampersand para indicar una referencia.

Play utiliza "SnakeYAML":http://code.google.com/p/snakeyaml/, que tiene una excelente "documentación":http://code.google.com/p/snakeyaml/wiki/Documentation#YAML_syntax colmada de ejemplos.

h2. <a name="model">Model classes</a>

The YAML file can contain one-to-many, many-to-one and many-to-many relationships. These relationships must be explicity annotated in the model classes, and you must indicate which is the "owning side" of the relationship.

p. @City.java@

bc.. package models;

import java.util.List;
import javax.persistence.*;
import play.db.jpa.Model;

@Entity
public class City extends Model {
    public String name;
    public String state;
    
    // bi-directional one-to-many, inverse side
    @OneToMany(mappedBy = "city", cascade = CascadeType.ALL)
    public List<Neighborhood> neighborhoods;
}

p. @Neighborhood.java@

bc.. package models;

import java.util.List;
import javax.persistence.*;
import play.db.jpa.Model;

@Entity
public class Neighborhood extends Model {
    public String name;
    
    // bi-directional one-to-many, owning side
    @ManyToOne
    public City city;
    
    public String tags;
    
    // owning side
    @ManyToMany
    public List<User> users;
}

p. @User.java@

bc.. package models;

import java.util.*;
import javax.persistence.*;
import play.db.jpa.Model;

@Entity
//@Table(name = "`user`")
public class User extends Model {
    public String name;
    public String email;
    public String lang;
    public Date created;
    
    // inverse side of the relation
    @ManyToMany(mappedBy = "users")
    public List<Neighborhood> neighborhoods;
}


p(note). Note that if you are using PostgreSQL you may need to explicitly set the name of the @user@ table with escape characters because @user@ is a reserved word.

h2. <a name="loading">Loading the data structure in your application</a>

Typically you will load the data structure defined in the YAML file as part of a "unit test":test#aFixturesa. But sometimes you may wish to populate the database with specific data in other circumstances, for example "when your application starts":jobs#aBootstrapjoba for the first time.

bc.. import play.*;
import play.jobs.*;
import play.test.*;
import models.*;

@OnApplicationStart
public class Bootstrap extends Job {
    public void doJob() {
        // Check if the database is empty
        if(User.count() == 0) {
            Fixtures.loadModels("initial-data.yml");
        }
    }
}

p. The objects will be created in the database, and you can then access them as you would any other model object.

bc. City city = City.all().first();
List<Neighborhood> neighborhoods = city.neighborhoods;


 