h1. Usa una cache

Para crear sistemas de alto rendimiento, a veces tienes que utilizar una cache. Play tiene una biblioteca de cache y usará "Memcached":http://www.danga.com/memcached/ cuando esté en un entorno distribuido.

Si no configuras Memcached, Play usará una cache independiente que almacena los datos en el montón (heap) JVM. Esta utilización de cache en la aplicación JVM rompe la asunción 'share nothing' hecha por Play: no podrás correr tu aplicación en varios servidores, y esperar que la aplicación se comporte de forma consistente. Cada instancia de la aplilcación tendrá una copia diferente de los datos.

Es importante entender que el compromico con la cache es claro: cuando pones datos en una cache, no puedes esperar que los datos se queden en ella para siempre. De hecho, no deberías. Una cache es rápida, pero los valores expiran, y la caché suele existir sólamente en la memoria (sin copia persistente).

Así que la mejor manera de usar la cache es repoblarla cuando no contiene lo que esperas:


bc.. public static void allProducts() {
    List<Product> products = Cache.get("products", List.class);
    if(products == null) {
        products = Product.findAll();
        Cache.set("products", products, "30mn");
    }
    render(products);
}

h2. <a name="api">La API de cache</a>

La API de cache está incluida en la clase @play.cache.Cache@. Esta clase contiene el conjunto de métodos para colocar, sustituir y extraer datos de la cache. El comportamiento exacto de cada método puedes consultarlo en la documentación de Memcached.

Algunos ejemplos:


bc.. public static void showProduct(String id) {
    Product product = Cache.get("product_" + id, Product.class);
    if(product == null) {
        product = Product.findById(id);
        Cache.set("product_" + id, product, "30mn");
    }
    render(product);
}
 
public static void addProduct(String name, int price) {
    Product product = new Product(name, price);
    product.save();
    showProduct(product.id);
}
 
public static void editProduct(String id, String name, int price) {
    Product product = Product.findById(id);
    product.name = name;
    product.price = price;
    Cache.set("product_" + id, product, "30mn");
    showProduct(id);
}
 
public static void deleteProduct(String id) {
    Product product = Product.findById(id);
    product.delete();
    Cache.delete("product_" + id);
    allProducts();
}

p. Algunos métodos comienzan con el prefijo @safe@, por ejemplo, @safeDelete@, @safeSet@. Los métodos estándard son no-bloqueantes. Esto significa que cuando ejecutas la llamada:

bc. Cache.delete("product_" + id);

El método @delete@ volverá inmediatamente y no esperará hasta que el objeto en cache se borre realmente. Así que si hay un error, por ejemplo de E/S, el objeto aún puede estar presente.

Cuando necesitas asegurarte de que el objeto se ha borrado antes de continuar, puedes usar el método @safeDelete@:

bc. Cache.safeDelete("product_" + id);

Este método es bloqueante y devuelve un valor booleano que indica si el objeto se ha borrado o no. Así, el patrón completo que asegura que un item se ha borrado de la cache es:

bc. if(!Cache.safeDelete("product_" + id)) {
    throw new Exception("Oops, the product has not been removed from the cache");
}
...

Hay que tener en cuenta que como son llamadas bloqueantes, los métodos @safe@ ralentizarán tu aplicación. De modo que úsalos sólo cuando sean necesarios.

También hay que notar que cuando se especifica @expiration == "0s"@ (cero segundos), el tiempo de expiración real puede variar entre las diferentes implementaciones de cache.

h2. <a name="session">¡No uses la Sesión como cache!</a>

Si vienes de un marco que usa una implementación en memoria del objeto Session, puedes sentirte frustado al ver que Play sólo permite que se salven en la sesión HTTP un conjunto pequeño de cadenas String. Pero esto es mucho mejor, porque una sesión no es el lugar para hacer de caché con los datos de tu aplicación.

Así que si estás acostumbrado a hacer cosas como estas:

bc. httpServletRequest.getSession().put("userProducts", products);
...
// y en las requests siguientes
products = (List<Product>)httpServletRequest.getSession().get("userProducts");

En Play puede hacerse lo mismo de forma algo diferente. Creemos que esta es una forma mejor:


bc. Cache.set(session.getId(), products);
...
// y en las requests siguientes
List<Product> products = Cache.get(session.getId(), List.class)

Aquí hemos usado un UUID único para mantener información única en la cache para cada usuario. Recuerda que, a diferencia de un objeto sesión, la cache no está unida a ningún usuario en particular.

h2. <a name="memcached">Configura memcached</a>

Cuando quieras habilitar una implementación real de Memcached, habilita Memcached con "memcached configuration":configuration#memcached y define el la dirección del proceso en "memcached.host configuration":configuration#memcached.host.

p(note). **Próximos pasos**
 
Aprenderemos a %(next)"Enviar emails":emails%.
