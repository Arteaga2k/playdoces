h1. Validaciones provistas por Play

Play trae incorporadas muchas funciones de validación, cada una es descrita en el cápitulo de "validación":validation.

Cada validación tiene asociado un mensaje de error definido en el archivo @$PLAY_HOME/resources/messages@, cuya clave es @validation.@ seguido del nombre de la propiedad validada. Puede sobreescribir este mensaje usando la misma clave en el archivo @conf/messages@, además puede proveer localización para diferentes idiomas.

<h2><a name="email">email</a></h2>

Comprueba que el valor es una dirección de correo electrónico válida.

bc. validation.email(address);

Sintáxis de la anotación:

bc. @Email String address

Clave del mensaje: @validation.email@

<h2><a name="equals">equals</a></h2>

Comprueba que el valor sea igual al valor de otro parámetro usando el método @equals@ del valor anotado, por ejemplo para comprobar el campo de confirmación de una contraseña:

bc. validation.equals(password, passwordConfirmation);

Sintáxis de la anotación:

bc. @Equals("passwordConfirmation") String password

Llave del mensaje: @validation.equals@

<h2><a name="future">future</a></h2>

Comprueba que el valor sea una fecha futura. Si una fecha es especificada como parámetro, entonces el valor debe ser una fecha posterior a la fecha pasada como parámetro:

bc. validation.future(dueDate);
validation.future(dueDate, shipmentDate);

Sintáxis de la anotación:

bc. @InFuture String dueDate
@InFuture("1979-12-31") String birthDate

Clave del mensaje: @validation.future@

<h2><a name="ipv4Address">ipv4Address</a></h2>

Comprueba que un valor sea una dirección IP acorde al protocolo de versión 4, los strings vacíos son considerados válidos

bc. validation.ipv4Address(value);

Sintáxis de la anotación:

bc. @IPv4Address String ip

Clave del mensaje: @validation.ipv4@

<h2><a name="ipv6Address">ipv6Address</a></h2>

Comprueba que un valor sea una dirección IP acorde al protocolo de versión 6, los strings vacíos son considerados válidos

bc. validation.ipv6Address(value);

Sintáxis de la anotación:

bc. @IPv6Address String ip

Clave del mensaje: @validation.ipv6@

<h2><a name="isTrue">isTrue</a></h2>

Comprueba que el valor sea de tipo @String@ o @Boolean@ y que al ser evaluado retorne @true@, por ejemplo para un checkbox que debe ser aceptado, o un @Number@ diferente de cero. Los valores nulos son considerados falsos o inválidos.

bc. validation.isTrue(agree);

Sintáxis de la anotación:

bc. @IsTrue String agree

Clave del mensaje: @validation.isTrue@

<h2><a name="match">match</a></h2>

Comprueba que el valor sea un string que cumpla con la expresión regular dada. Los strings vacíos son considerados válidos.

bc. validation.match(abbreviation, "[A-Z]{3}"); // TLA

Sintáxis de la anotación:

bc. @Match("[A-Z]{3}") String abbreviation

Llave del mensaje: @validation.match@

<h2><a name="max">max</a></h2>

Comprueba que el valor sea de tipo @String@ o @Number@ y que no sea mayor al número dado. Valores nulos son considerados válidos.

bc. validation.max(wordCount, 7500); // Short story

Sintáxis de la anotación:

bc. @Max(7500) String wordCount

Llave del mensaje: @validation.max@

<h2><a name="maxSize">maxSize</a></h2>

Comprueba que el valor sea de tipo @String@ y que su longitud no sea mayor a la especificada. Strings vacíos son considerados válidos.

bc. validation.maxSize(url, 2083); // IE 4.0 - 8

Sintáxis de la anotación:

bc. @MaxSize(2083) String value

Clave del mensaje: @validation.maxSize@

<h2><a name="min">min</a></h2>

Comprueba que el valor sea de tipo @String@ o @Number@ y que no sea menor que número dado. Valores nulos son considerados válidos.

bc. validation.min(age, 18); // Adult

Sintáxis de la anotación:

bc. @Min(18) Long age

Clave del mensaje: @validation.min@

<h2><a name="minSize">minSize</a></h2>

Comprueba que el valor sea de tipo @String@ y que su longitud no sea menor a la especificada. Strings vacíos son considerados válidos.

bc. validation.minSize(value, 42);

Sintáxis de la anotación:

bc. @MinSize(42) String value

Llave del mensaje: @validation.minSize@

<h2><a name="past">past</a></h2>

Comprueba que el valor sea una fecha pasada. Si una fecha es especificada como parámetro, entonces el valor debe ser una fecha anterior a la fecha dada como parámetro:

bc. validation.past(actualDepartureDate);
validation.past(expectedDepartureDate, expectedArrivalDate);

Sintáxis de la anotación:

bc. @InPast String actualDepartureDate
@InPast("1980-01-01") String birthDate

Llave del mensaje: @validation.past@

<h2><a name="phone">phone</a></h2>

Comprueba que el valor sea un número telefónico válido; strings vacíos son considerados válidos. La validación no es estricta y está diseñada para asegurar un patrón telefónico válido. Implemente su propio @Match para validaciones particulares de un país.

bc. validation.phone(value);

Sintáxis de la anotación:

bc. @Phone String phone

Clave del mensaje: @validation.phone@

Formato: @+CCC (SSSSSS)9999999999xEEEE@
 
* @+@          Clave opcional de acceso del país
* @CCC@        Clave opcional de acceso del país, hasta 3 dígitos, note que después debe haber un delimitador
* @(SSSSSS)@   Clave de sub-zona opcional, hasta 6 dígitos
* @9999999999@ Número obligatorio, hasta 20 dígitos (que deben cubrir todos los casos conocidos de ahora y del futuro)
* @x@          Extensión opcional, también puede ser escrita "ext" o "extension"
* @EEEE@       Número de extensión opcional, hasta 4 dígitos
* Los delimitadores puede ser un _espacio_, @-@, @.@ o @/@ y pueden ser usados en cualquier lugar de la cadena.
  
Ejemplos:

* @usa:(305) 613 09 58 ext 101@
* @france:+33 1 47 37 62 24 x3@
* @germany:+49-4312 / 777 777@
* @china:+86 (10)69445464@
* @uk:(020) 1234 1234@

<h2><a name="range">range</a></h2>

Comprueba que el valor sea un número comprendido (de manera inclusiva) dentro del rango especificado por los dos números dados.

bc. validation.range(wordCount, 17500, 40000); // Novella

Sintáxis de la anotación:

bc. @Range(min = 17500, max = 40000) String wordCount

Llave del mensaje: @validation.range@

<h2><a name="required">required</a></h2>

Comprueba que el valor sea de tipo @String@, @Collection@, @File@ o un array y que no sea vacío.

bc. validation.required(value);

Sintáxis de la anotación:

bc. @Required String value

Clave del mensaje: @validation.required@

<h2><a name="url">url</a></h2>

Comprueba que el valor sea un URL válido, los strings vacíos son consideraros válidos. Tenga en cuenta que no todos los URL's válidos (como se definen en el RFC 1738) son aceptados; sólo los URL's que comienzan con el esquema @http@, @https@ o @ftp@ son considerados válidos.

bc. validation.url(value);

Sintáxis de la anotación:

bc. @URL String address

Clave del mensaje: @validation.url@

