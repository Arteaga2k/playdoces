h1. Guía de Seguridad

El framework Play se diseña pensando en la seguridad - pero es imposible evitar que los desarrolladores usen el framework para sabotear y abrir brechas. Esta guía describe los problemas de seguridad comunes en las aplicaciones web y cómo evitarlos en las aplicaciones Play.

h2. <a name="sessions">Sesiones</a>

Con frecuencia usted necesita guardar información asociada a un usuario, particularmente conocer si está registrado o no. Sin una sesión, el usuario necesitaría proporcionar sus credenciales con cada petición. 

Para eso son las sesiones: un conjunto de cookies almacenadas en el navegador del usuario que lo identifican ante el sitio web, y proporcionan otra información que su aplicación posiblemente decidió alamcenar allí y no en la capa de datos; como por ejemplo el idioma.

h3. Mantega su clave secreta... secreta

La sesión es un conjunto de pares clave/valor, firmadas mas no encriptadas. Es decir que en la medida que su clave secreta esté segura, no es posible que terceras personas falsifiquen la sesión.

La clave secreta se almacena en el archivo @conf/application.conf@. Es muy importante mantenerla en privado: no la consigne (_commit_) en un repositorio público, y cuando instale una aplicación desarrollada por otra persona cambie la clave secreta por una propia. Puede hacer esto con el comando @play secret@.

h3. No guarde datos importantes

Sin embargo, debido a que no está encriptado, no debería guardar datos importantes en la sesión. Ya que pueden ser vistos revisando el cookie del usuario, monitoreando la conexión en una red de área local o por wifi.

La sesión se almacena en un cookie, y los cookies tienen un límite de 4 KB. Adicionalmente, solo se pueden guardar cadenas de texto (_strings_).

h2. <a name="xss">Cross-Site Scripting</a>

El Cross-site scripting es una de las vulnerabilidades más común en las aplicaciones web. Consiste en la inyección de código JavaScript malicioso en las páginas web usando los formularios de su aplicación.

Digamos que está escribiendo un blog, y cualquier persona puede agregar un comentario. Si usted incluye ciegamente lo escrito por los comentaristas en su página HTML, estará abriendo su sitio a diversos ataques. Tales como:
* Mostrar una ventana emergente (_popup_) a sus visitantes
* Redireccionar sus visitantes a un sitio controlado por el atacante
* Plagiar información que supuestamente solo es visible por el usuario actual, y enviarla al sitio del atacante

Por lo tanto es muy importante protegerse de esos ataques.

El sistema de plantillas de Play automáticamente aplica los _escapes_ necesarios a las cadenas de texto (_strings_). Si verdaderamente necesita insertar texto HTML sin _escapes_ en sus plantillas, puede hacerlo usando la extensión Java "raw()":javaextensions#raw sobre la cadena de texto. Pero si el texto fue proporcionado por el usuario desde un formulario, primero debe asegurarse de que está limpio (_sanitized_).

Cuando limpie los textos introducidos por los usuarios, siempre utilice la 'lista blanca' (permitir solamente una lista de tags seguros) en vez de la 'lista negra' (prohibir una lista de tags inseguros y permitir todos los demás).

"Más sobre cross-site scripting":http://es.wikipedia.org/wiki/Cross-site_scripting

h2. <a name="sql">Inyección SQL</a>

La inyección SQL es un _"exploit":http://es.wikipedia.org/wiki/Exploit_ que consiste en usar los campos de los formularios para introducir y luego ejecutar consultas SQL no contempladas por el desarrollador. Esto puede ser utilizado para destruir los datos, u obtener acceso a datos que no deberían ser visibles por el usuario actual.

!http://imgs.xkcd.com/comics/exploits_of_a_mom.png!

Al utilizar los métodos "find" de alto nivel, debe protegerse de las inyecciones SQL. Y cuando construya sus propias consultas manualmente, debe tener cuidado de no concatenar cadenas de texto con el operador @+@ sino utilizar los _placeholders_ @?@.

Esto está bien:

bc. createQuery("SELECT * from Stuff WHERE type= ?1").setParameter(1, theType);

Esto no:

bc. createQuery("SELECT * from Stuff WHERE type=" + theType;

h2. <a name="csrf">Cross-Site Request Forgery (Falsificación de petición)</a>

El ataque CSRF puede ser verdaderamente problemático para las aplicaciones web:

bq. Este tipo de ataque consiste en la inclusión de código malicioso o un enlace en una página que accede a una aplicación web haciendole creer que el usuario ha sido autentificado. Si la sesión para esa aplicación web no tiene tiempo de expiración, un atacante puede ejecutar comandos no autorizados.

Para prevenir este tipo de ataques, lo primero que debe hacer es usar apropiadamente los métodos GET y POST. Es decir, que solo debería ustilizar el método POST para cambiar el estado de la aplicación.

Para las peticiones POST la única manera de proteger adecuadamente las acciones importantes es usar una clave (_token_) de autenticidad. Play ya tiene incorporado unos métodos _helpers_ para manejar esto:

* un método @checkAuthenticity()@ disponible en los controladores, que verifica la autenticidad del token de los parámetros de la petición y devuelve una respuesta de 'prohibición' si algo está incorrecto.
* el método @session.getAuthenticityToken()@ genera un token de autenticidad solamente válido para la sesión actual.
* el tag @#{authenticityToken /}@ crea un campo _input_ oculto que puede agregar a cualquier formulario.

Ejemplos:

bc. public static destroyMyAccount() {
    checkAuthenticity();
    …
}

Esto solamente funcionará cuando sea llamado por un formulario que incluya un token de autenticidad correcto, tal como este:

bc. <form method="post" action="/account/destroy">
    #{authenticityToken /}
    <input type="submit" value="destroy my account">
</form>

Para peticiones POST, el "tag form":tags#form de Play genera automáticamente el token de autenticidad:

bc. #{form @destroyMyAccount()}
    <input type="submit" value="destroy my account">
#{/form}

Por supuesto usted puede agregar la llamada al método @checkAuthenticity()@ como un "filtro before":controllers#before si quiere proteger todas las acciones de una jerarquía de controladores.

"Más sobre cross-site request forgery":http://en.wikipedia.org/wiki/Cross-site_request_forgery

p(note). **Próximos pasos**
 
Continúa con: %(next)"Módulos de Play":modules%.
