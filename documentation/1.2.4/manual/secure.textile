h1. Módulo de Seguridad

El módulo **Secure** te ayuda a configurar en tu aplicación la administración básica de autenticación y autorización. Provee un controlador simple @controllers.Secure@ que define un conjunto de interceptores que fácilmente puedes agregar a tus controladores usando la anotación <code>@With</code>.

h2. <a name="setup">Configuración del Módulo</a>

h3. <a name="enable">Habilitar el módulo de seguridad de la aplicación</a>

Habilita el módulo de seguridad en el archivo @/conf/dependencies.yml@ agregando una línea después de @require:@

bc. require:
    - play -> secure

Despues ejecuta el comando @play dependencies@ para agregar el módulo a tu aplicación.

h3. <a name="routes">Importa las rutas default del módulo @Secure@</a>

Importa el módulo default modificando el archivo @conf/routes@ con la siguiente línea:

bc. # Import Secure routes
*      /                module:secure

p(note). **Nota** que no es requerido usar el archivo por defecto de rutas. Puedes además definir tus propias rutas, o alguna mezcla de las dos.

h2. <a name="controller">Protegiendo un controlador</a>

Para proteger un controlador sólamente necesitas anotarl usando <code>@With</code>. Por ejemplo:

bc. @With(Secure.class)
public class Application extends Controller {
    
    public static void index() {
        render();
    }
}

Este controlador será automáticamente protegido con la página de autenticación por defecto.

h2. <a name="custom">Personalizado el mecanismo de autenticación</a>

Por defecto, la página de autenticación aceptará cualquier combinación de usuario/contraseña. Para personalizar esto en tu aplicación debes de especificar un proovedor del tipo **Security**. Solo crea una clase en el paquete @controllers@ que herede de la clase @controllers.Secure.Security@, entonces puedes sobreescribir el método @authenticate(String username, String password)@.

bc. package controllers;
 
public class Security extends Secure.Security {
    
    static boolean authenticate(String username, String password) {
        User user = User.find("byEmail", username).first();
        return user != null && user.password.equals(password);
    }
}

p(note). **Nota** que también puedes sobreescribir otros métodos para personalizar cómo la aplicación debe reaccionar en los eventos de autenticación (@onAuthenticated@, @onDisconnected@).

h2. <a name="user">Obtener el usuario autenticado</a>

Desde el código de tu aplicación puedes usar la clase que acabas de crear para obtener el usuario conectado:

bc. @With(Secure.class)
public class Application extends Controller {
    
    public static void index() {
        String user = Security.connected();
        render(user);
    }
}

h2. <a name="auth">Agregando validaciones de Autorización</a>

h3. <a name="authcontroller">Anotaciones en el @Controller@</a>

Puedes usar la anotación <code>@Check</code> ya sea en una clase @controller@ o un método dentro de éstos para decirle al módulo de seguridad que valide que el usuario autenticado tiene la autorización requerida para invocar una acción.

Por ejemplo, para restringir un método de acción a usuarios autorizados:

bc. @With(Secure.class)
public class Application extends Controller { 
   …
   
   @Check("administrator")
   public static void delete(Long id) {
       …
   }
}

Para restringir todas las acciones en un controlador, usa la anotación <code>@Check</code> en la clase controlador:

bc. @With(Secure.class)
@Check("administrator")
public class Application extends Controller { 
   …
   
   public static void delete(Long id) {
       …
   }
   
   public static void edit(Long id) {
       …
   }
}


Por ejemplo, para restringir a usuarios autorizados en un método mapeado por un acción:

bc. @With(Secure.class)
public class Application extends Controller { 
   …
   
   @Check("administrator")
   public static void delete(Long id) {
       …
   }
}

Para restringir todos los métódos en un controlador, puedes usar la anotación <code>@Check</code> en la clase controlador:

bc. @With(Secure.class)
@Check("administrator")
public class Application extends Controller { 
   …
   
   public static void delete(Long id) {
       …
   }
   
   public static void edit(Long id) {
       …
   }
}

Por defecto, el módulo de seguridad siempre autoriza todas las revisiones. Debes de personalizarlo sobreescribiendo uno o más métodos en la clase @Security@:

bc. package controllers;
 
public class Security extends Secure.Security {
    …
    
    static boolean check(String profile) {
        User user = User.find("byEmail", connected()).first();
        if ("administrator".equals(profile)) {
            return user.admin;
        }
        else {
            return false;
        }
    }    
}

h3. <a name="authtag">Etiquetas para las plantillas</a>

Además puedes usar la etiqueta @secure.check@ para verificar la autorización en las plantillas. Esto es muy útil cuando necesitas desplegar condicionalmente en la interfaz de usuario controles para operaciones que están protegidas en el controlador, por ejemplo:

bc. #{secure.check "administrator"}
    <a href="@{delete(item.id)}">Delete</a>
#{/secure.check}

La etiqueta sólo despliega su contenido para usuarios autorizados, así que la liga @‘Delete’@ sólo es desplegada cuando un usuario está autorizado para ejecutar la acción @delete@ en el controlador.

h2. <a name="commands">Commandos</a>

El módulo @Secure@ provee un comando @play secure:override@ que puedes usar para sobreescribir la página de autenticación, así que puedes personalizarlo en tu aplicación. Esto lo puedes hacer copiando el archivo correspondiente del módulo a un archivo que será usado en tu aplicación.

Puedes abreviar @play secure:override@ con @play secure:ov@.

h3. <a name="css">Sobreescribir CSS</a>

Usa el comando @play secure:override --css@ para copiar un archivo CSS a tu aplicación donde puedes personalizar los estilos de la página de autenticación.

h3. <a name="login">Sobreescribir la plantilla de autenticación</a>

Usa el comando @play secure:override --login@ para copiar una platilla de la página de autenticación que sobreescribe la platilla de autenticación por defecto.

h3. <a name="layout">Sobreescribir la disposición principal</a>

Usa el comando @play secure:override --layout@ para copiar la platilla con la disposición principal que va a sobreescribir la disposición usada en la página de autenticación.

