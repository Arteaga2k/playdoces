h1. Las Bibliotecas de Play

El paquete @play.libs@ contiene varias bibliotecas útiles que te ayudarán a conseguir las tareas de programación más comunes. 

La mayoría de estas bibliotecas son simples helpers que se usan de forma muy directa:

* "Codec":/@api/play/libs/Codec.html: Utilidades para codificar y decodificar datos.
* "Crypto":/@api/play/libs/Crypto.html: Utilidades criptográficas.
* "Expression":/@api/play/libs/Expression.html: Evaluar expresiones dinámicas.
* "F":/@api/play/libs/F.html: Programación funcional con Java.
* "Files":/@api/play/libs/Files.html: Ayudas para manipulación de sistemas de ficheros.
* "I18N":/@api/play/libs/I18N.html: Ayudas para internacionalización.
* "IO":/@api/play/libs/IO.html: Gestión de Streams.
* "Images":/@api/play/libs/Images.html: Utilidades de manejo de Imágenes.
* "Mail":/@api/play/libs/Mail.html: Funciones de correo.
* "MimeTypes":/@api/play/libs/MimeTypes.html: Para enfrentarse a los tipos MIME.
* "OAuth":/@api/play/libs/OAuth.html: Protocolo OAuth cliente.
* "OAuth2":/@api/play/libs/OAuth2.html: Protocolo OAuth2 cliente.
* "OpenID":/@api/play/libs/OpenID.html: Protocolo OpenID cliente.
* "Time":/@api/play/libs/Time.html: Utilidades de tiempo y duración.
* "WS":/@api/play/libs/WS.html: Potente cliente de Web Service.
* "XML":/@api/play/libs/XML.html: Carga de estructuras XML.
* "XPath":/@api/play/libs/XPath.html: Analizar XML con XPath.

Las secciones que siguen aportan más información sobre las bibliotecas más importantes.


h2. Análisis de XML con XPath

"XPath":http://en.wikipedia.org/wiki/XPath es probablemente el método más sencillo para analizar un documento XML sin tener que usar herramientas de generación de códigos. La biblioteca @play.libs.XPath@ ofrece todas las primitivas para métodos necesarias para conseguir eficientemente esta tarea.

Las operaciones @XPath@ operan sobre todos los tipos de @org.w3.dom.Node@:

bc.. org.w3.dom.Document xmlDoc = … // recuperar un documento de algun sitio

for(Node event: XPath.selectNodes("events//event", xmlDoc)) {

    String name = XPath.selectText("name", event);
    String data = XPath.selectText("@date", event);
    for(Node place: XPath.selectNodes("//place", event)) {
        String place = XPath.selectText("@city", place);
        …
    }

    …
}

h2. Cliente de Web Service

@play.libs.WS@ aporta un poderoso cliente HTTP. En el fondo usa "Async HTTP client":https://github.com/AsyncHttpClient/async-http-client. 

Es sencillo hacer una request:

bc. HttpResponse res = WS.url("http://www.google.com").get();

Una vez que tienes el objeto @HttpResponse@ puedes acceder a todas las propiedades de la response:

bc. int status = res.getStatus();
String type = res.getContentType();

También puedes recuperar el contenido del cuerpo de varios tipos de contenidos:

bc. String content = res.getString();
Document xml = res.getXml();
JsonElement json = res.getJson();
InputStream is = res.getStream();

También puedes usar el API *async* para hacer solicitudes HTTP de forma no bloqueante. Recibirás un @Promise<HttpResponse>@. Cuando se ejecute, puedes usar el @HttpResponse@ como de costumbre:

bc. Promise<HttpResponse> futureResponse = WS.url(
    "http://www.google.com"
).getAsync();

h2. Programación funcional con Java

La biblioteca @play.libs.F@ aporta varios constructores útiles que vienen de la programación funcional. Estos constructores se usan para manejar casos de abstracción compleja. Para los que están acostumbrados a la programación funcional, tenemos:

* @Option<T>@ (un valor T que puede inicializarse o no)
* @Either<A,B>@ (contiene un valor A o bien un valor B)
* @Tuple<A,B>@ (contiene tanto el valor A como el B)

h3. @Option<T>@, @Some<T>@ y @None<T>@

Cuando escribes una función que puede no devolver un resultado en algunos casos (por ejemplo, un método @find@), un patrón común (malo) en Java es devolver @null@ cuando no hay resultado. Esta práctica es peligrosa porque el tipo de retorno de la función no muestra cláramente que puede no devolver un objeto y ha sido reconocido por el inventor de las referencias anulables como un "“error de mil millones de dólares“":http://en.wikipedia.org/wiki/Pointer_(computing)#Null_pointer.

@Option<T>@ es una solución elegante a este problema: en vez de devolver un objeto de tipo @T@, la función devuelve un @Option<T>@. Si la función tiene éxito, devuelve un objeto de tipo @Some<T>@ (envolviendo al resultado real). Si no, se devuelve un objeto del tipo @None<T>@, siendo ambos subtipos de @Option<T>@.

Veamos un ejemplo:

bc. /* Division segura (nunca arrojara un error ArithmeticException) */
public Option<Double> div(double a, double b) {
    if (b == 0)
        return None();
    else
        return Some(a / b);
}

Y esta es una forma de usar esta función:

bc. Option<Double> q = div(42, 5);
if (q.isDefined()) {
    Logger.info("q = %s", q.get()); // "q = 8.4"
}

Pero hay una sintaxis mejor para usarla, basada en el hecho de que @Option<T> implementa @Iterable<T>@:

bc. for (double q : div(42, 5)) {
    Logger.info("q = %s", q); // "q = 8.4"
}

El cuerpo del bucle se ejecuta una vez, sólo si la función @div@ tiene éxito.


h3. @Tuple<A, B>@

La práctica clase @Tuple<A, B>@ envuelve a dos objetos del tipo @A@ y @B@. Pueden recuperarse estos objetos usando los campos @_1@ y @_2@, respectivamente. Por ejemplo:

bc. public Option<Tuple<String, String>> parseEmail(String email) {
    final Matcher matcher = Pattern.compile("(\\w+)@(\\w+)").matcher(email);
    if (matcher.matches()) {
        return Some(Tuple(matcher.group(1), matcher.group(2)));
    }
    return None();
}

Luego:

bc. for (Tuple<String, String> email : parseEmail("foo@bar.com")) {
    Logger.info("name = %s", email._1); // "name = foo"
    Logger.info("server = %s", email._2); // "server = bar.com"
}

p(note). La clase @T2<A, B>@ es un alias para @Tuple<A, B>@. Para manejar tuplas de 3 elementos usa @T3<A, B, C>@ y así hasta @T5<A, B, C, D, E>@.

h3. Coincidencia de patrones

A veces nos vemos en la necesidad de tener coincidencia de patrones en Java. Desafortunadamente, Java no lleva incluída la coincidendia de patrones y debido a la falta de construcciones funcionales, es difícil añadirlo como una biblioteca. De cualquier forma, nosotros hemos desarrollado una solución que no es mala del todo.

Nuestra idea fue utilizar la última sintaxis de bucles for para conseguir una coincidencia de patrones básica para Java. La coincidencia de patrones ha de comprobar si el objeto cumple las condiciones obligatorias y también ha de extraer el valor interesante. La biblioteca de coincidencia de patrones para Play va es parte de @play.libs.F@.

Veamos un ejemplo sencillo; tenemos una referencia de tipo Object y queremos comprobar que es una cadena que empieza por 'command:'.

El modo estándar sería:

bc.. Object o = anything();
 
if(o instanceof String && ((String)o).startsWith("command:")) {
    String s = (String)o;
    System.out.println(s.toUpperCase());
}

p. Usando la biblioteca de coincidencia de patrones de Play puede escribirse como:

bc. for(String s: String.and(StartsWith("command:")).match(o)) {
    System.out.println(s.toUpperCase());
}

El bucle for se ejecuta una vez, sólo si la condición se cumple, y automáticamente extrae el valor String sin necesidad de hacer casting. Como no hay casting explícito, todo es seguro en tipos y aprobado por el compilador.

h3. Promesas

Las @Promise@ son tipos particularizados del tipo @Future@ de Play. De hecho un @Promise<T>@ es también un @Future<T>@ de modo que puede usarse como un @Future@ estándar. Pero también tiene una propiedad interesante: la capacidad de registrar callback usando @onRedeem(…)@ que será invocada tan pronto como el valor prometido esté disponible.

Las instancias de @Promise@ se usan en todas partes en Play en vez de las instancias de @Future@ (para Jobs, @WS.async@, etc…).

Pueden conbinarse de varias formas. Por ejemplo:

bc. Promise p = Promise.waitAll(p1, p2, p3)
Promise p = Promise.waitAny(p1, p2, p3)
Promise p = Promise.waitEither(p1, p2, p3)

h2. OAuth

"OAuth":http://oauth.net/ es un protocolo abierto para un API de autorización, usando un enfoque simple y estándar, para las aplicaciones de escritorio y de la web.

Hay dos especificaciones diferentes: OAuth 1.0 y OAuth 2.0. Play incluye bibliotecas para conectarse como consumidor a servicios que propongan cualquiera de estas dos especificaciones.

El proceso general es el siguiente:
* Redirigir al usuario a la página de autorización del proveedor
* Una vez que el usuario consigue la autorización, se le redirige de nuevo al servidor junto con un toker no-autorizado
* Nuestro servidor intercambia el token no-autorizado por un token de acceso específico para el usuario actual, que ha de ser salvado para ejecutar requests al servicio. Este paso se hace en una comunicacion servidor-a-servidor.

La Play framework se ocupa de la mayor parte del proceso.

h3. <a>OAuth 1.0</a>

La funcionalidad para OAuth 1.0 está en la clase @play.libs.OAuth@ y se basa en "oauth-signpost":http://code.google.com/p/oauth-signpost/. La usan servicios como "Twitter":http://apiwiki.twitter.com/ o "Google":http://code.google.com/apis/accounts/docs/OAuth.html

Para conectarte a un servicio, tienes que crear una instancia de OAuth.ServiceInfo con la siguiente información, obtenida del proveedor del servicio:
* URL del token de petición
* URL del token de acceso
* URL de autorización
* clave de consumidor
* "secret" de consumidor

El token de acceso puede recuperarse de esta forma:


bc. public static void authenticate() {
    // TWITTER es un objeto OAuth.ServiceInfo
    // getUser() es un metodo que devuelve el usuario actual 
    if (OAuth.isVerifierResponse()) {
        // Ya hemos obtenido el verificador;
        // ahora conseguimos los tokens de acceso usando los tokens de request
        OAuth.Response resp = OAuth.service(TWITTER).retrieveAccessToken(
            getUser().token, getUser().secret
        );
        // los guardamos y volvemos al indice
        getUser().token = resp.token; getUser().secret = resp.secret;
        getUser().save()
        index();
    }
    OAuth twitt = OAuth.service(TWITTER);
    Response resp = twitt.retrieveRequestToken();
    // Hemos recibido los tokens de no-autorizado
    // tenemos que guardarlos antes de continuar
    getUser().token = resp.token; getUser().secret = resp.secret;
    getUser().save()
    // Redirigimos al usuario a la pagina de autorizacion
    redirect(twitt.redirectUrl(resp.token));
}

Ahora podemos hacer llamadas firmando las requests con la pareja de token:

bc. mentions = WS.url(url).oauth(TWITTER, getUser().token, getUser().secret).get().getString();

El ejemplo no controla errores, pero en producción deberías hacerlo. El objeto OAuth.Response tiene un campo de errores que es no nulo cuando ha habido algún error. Si lo hay suele ser que el usuario no ha conseguido acceder, o que el proveedor está muerto o tiene problemas.

Hay un ejemplo completo de uso de esto en @samples-and-tests/twitter-oauth@.

h3. <a>OAuth 2.0</a>

OAuth 2.0 es mucho más sencilla que OAuth 1.0 porque no necesita firmar las requests. Lo usan "Facebook":http://developers.facebook.com/docs/authentication/ y "37signals":http://37signals.com.

La funcionalidad para esto viene en @play.libs.OAuth2@.

Para conectarse a un servicio, hay que crear una instancia de OAuth2 con la siguiente información, que se obtiene del proveedor del servicio:
* URL del token de acceso
* URL de autorización
* Client ID
* Secret

bc. public static void auth() {
    // FACEBOOK es un objeto OAuth2
    if (OAuth2.isCodeResponse()) {
        // authUrl ha de ser la misma que en la llamada a retrieveVerificationCode
        OAuth2.Response response = FACEBOOK.retrieveAccessToken(authUrl);
        // nulo si ha habido error
        String accessToken = response.accessToken;
        // nulo si la llamada ha tenido exito
        OAuth2.Error = response.error;
        // salvar accessToker, lo necesitaremos para solicitar el servicio
        index();
    }
    // authUrl es una String que contiene una URL absoluta donde el servicio
    // tendra que redirigir al usuario
    // Esto levantara una redireccion
    FACEBOOK.requestVerificationCode(authUrl);
}

Una vez que tienes el token de acceso asociado al usuario actual, puede usarse para solicitar al servicio en nombre del usuario:

bc. WS.url(
    "https://graph.facebook.com/me?access_token=%s", access_token
).get().getJson();

Hay un ejemplo de uso completo en @samples-and-tests/facebook-oauth2@.


h2. OpenID

"OpenID":http://openid.net/ es un sistema de identidades abierto y descentralizado. Puedes aceptar fácilmente nuevos usuarios en la aplicación sin tener que guardar información específica de cada uno de ellos. Basta con que conserves traza de los usuarios autorizados mediante su **OpenID**.

Este ejemplo aporta una vista de alto nivel de cómo puede usarse la autentificación OpenID con una aplicación Play:

* Para cada request, comprobar si el usuario está conectado
* Si no, mostrar una página donde el usuario pueda introducir su OpenID
* Redirigir al usuario al proveedor OpenID
* Cuando el usuario vuelva, obtener el OpenID verificado y salvarlo en la sesión HTTP.

La funcionalidad para OpenID está en la clase @play.libs.OpenID@.

bc.. @Before(unless={"login", "authenticate"})
static void checkAuthenticated() {
    if(!session.contains("user")) {
        login();
    }
}
 
public static void index() {
    render("Hello %s!", session.get("user"));
}
     
public static void login() {
    render();
}
    
public static void authenticate(String user) {
    if(OpenID.isAuthenticationResponse()) {
        UserInfo verifiedUser = OpenID.getVerifiedID();
        if(verifiedUser == null) {
            flash.error("Oops. La autentificación ha fallado");
            login();
        } 
        session.put("user", verifiedUser.id);
        index();
    } else {
        if(!OpenID.id(user).verify()) { // redirigimos al usuario
            flash.error("Cannot verify your OpenID");
            login();
        } 
    }
}

p. Y la plantilla @login.html@:

bc.. #{if flash.error}
<h1>${flash.error}</h1>
#{/if}
 
<form action="@{Application.authenticate()}" method="POST">
    <label for="user">¿Cuál es su OpenID?</label>
    <input type="text" name="user" id="user" />
    <input type="submit" value="login…" />
</form>
</code>

p. Y finalmente las definiciones de @routes@:

bc. GET   /                     Application.index
GET   /login                Application.login
*     /authenticate         Application.authenticate

p(note). **Continuamos la discusión**
 
Ahora veremos cómo ejecutar operaciones fuera de cualquier request HTTP usando  %(next)"Jobs Asíncronos":jobs%.