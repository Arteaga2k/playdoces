h1. Glosario de términos

h2. <a name="applicationLayout">Application layout</a>

"Ayudanos a completar el glosario":translation: Incluir aquí la definición de la application layout.

h2. <a name="actionMethod">Action method</a>

"Ayudanos a completar el glosario":translation: Incluir aquí la definición de un action method.

h2. <a name="binder">Binder</a>

Un @binder@ o vinculador de datos es una clase Java que especifica cómo vincular un parámetro que viene de un pedido HTTP a un tipo de dato particular de Java. 

Play utiliza estos binders para cargar automáticamente el contenido de los argumentos de los métodos de acción de los controladores a partir de los valores recibidos en el pedido HTTP.

Para implementar sus propios binder personalizados debe crear una clase que extienda @TypeBinder<Type>@ e implementar el método bind, por ejemplo:

bc. public class PointBinder implements TypeBinder<Point> {
 
    public Object bind(String name, Annotation[] anns, String value, 
    Class class) {
        String[] values = value.split(",");
        return new Point(
            Integer.parseInt(values[0]),
            Integer.parseInt(values[1])
        );
    }
}

Para más información consulte la documentación sobre "vinculaciones personalizadas":controllers#custombinding

h2. <a name="catchAll">Catch all route</a>

Ruta 'atrapa todo' o comodín. En el archivo de rutas que puedes encontrar en @conf/routes@, por defecto viene definida una ruta genérica 'catch all' que coincidirá con cualquier acción de cualquier controlador. La ruta en cuestión es la siguiente:

bc. # Catch all
*       /{controller}/{action}                  {controller}.{action}

Básicamente lo que hace es mapear cualquier acción a una ruta HTTP compuesta por el nombre del controlador seguida del nombre de la acción. Ej: en caso de tener una acción _miAccion_ en el controlador _miControlador_, la ruta 'catch all' nos permitiría acceder a dicha acción con el siguiente url: @http://localhost:9000/miControlador/miAccion@.

Esta ruta está pensada para permitirnos probar nuestra aplicación en modo desarrollo sin tener que definir explícitamente la ruta de cada acción. Sin embargo, es una buena práctica definir explícitamente todas las rutas que aceptará nuestra aplicación, por lo que se recomienda comentar o eliminar dicha ruta del archivo _routes_ al pasar a producción.

h2. <a name="continuation">Continuation</a>

"Ayudanos a completar el glosario":translation: Incluir aquí la definición de Continuation

h2. <a name="classEnhancement">Class Enhancement</a>

"Ayudanos a completar el glosario":translation: Incluir aquí la definición de Class Enhancement.

h2. <a name="classEnhancer">Class Enhancer</a>

"Ayudanos a completar el glosario":translation: Incluir aquí la definición de Class Enhancer.

h2. <a name="deployment">Deployment</a>

"Ayudanos a completar el glosario":translation: Incluir aquí la definición de deployment.

h2. <a name="hotReload">Hot reload</a>

"Ayudanos a completar el glosario":translation: Incluir aquí la definición de Hot reload.

h2. <a name="hotSwap">Hot swap</a>

"Ayudanos a completar el glosario":translation: Incluir aquí la definición de Hot swap.

h2. <a name="httpRequest">HTTP request</a>

Pedido HTTP. HTTP (Hypertext Transfer Protocol o protocolo de transferencia de hipertexto), el protocolo usado por internet, es un protocolo orientado a transacciones que sigue el esquema petición-respuesta entre un cliente y un servidor. Cada interacción con un servidor web (un usuario navegando a un usuario navega a un sitio web, una llamada ajax, o un web service que es comsumido) consiste en un pedido HTTP que recibirá una respuesta del servidor.

h2. <a name="httpResponse">HTTP response</a>

"Ayudanos a completar el glosario":translation: Incluir aquí la definición de un HTTP response.

h2. <a name="javaBean">Java Bean</a>

"Ayudanos a completar el glosario":translation: Incluir aquí la definición de Java Bean.

h2. <a name="javaClasspath">Java Classpath</a>

"Ayudanos a completar el glosario":translation: Incluir aquí la definición de Java Classpath.

h2. <a name="javaDebugger">Java Debugger</a>

"Ayudanos a completar el glosario":translation: Incluir aquí la definición de Java Debugger.

h2. <a name="javaPackage">Java package</a>

"Ayudanos a completar el glosario":translation: Incluir aquí la definición de un Java package.

h2. <a name="packaging">Packaging</a>

"Ayudanos a completar el glosario":translation: Incluir aquí la definición de packaging.

h2. <a name="queryString">Query string</a>

Cadena de consulta. Es la parte de una URL que contiene los parámetros que deben pasar a aplicaciones web. Normalmente están compuestos por un nombre y un valor separados por el signo igual. Diferentes pares de parámetros y valores se separan mediante el signo "&". Un ejemplo de parámetros pasados a través del query string sería: @www.misitio.net/pagina.php?nombre1=valor1&nombre2=valor2@.

h2. <a name="requestHeader">Request header</a>

"Ayudanos a completar el glosario":translation: Incluir aquí la definición de HTTP request header.

h2. <a name="requestBody">Request body</a>

"Ayudanos a completar el glosario":translation: Incluir aquí la definición de HTTP request body.

h2. <a name="stateless">Stateless</a>

"Ayudanos a completar el glosario":translation: Incluir aquí la definición de stateless.

h2. <a name="tag">Template tag</a>

"Ayudanos a completar el glosario":translation: Incluir aquí la definición de un template tag.

h2. <a name="template">Template</a>

"Ayudanos a completar el glosario":translation: Incluir aquí la definición de un template.

h2. <a name="testRunner">Test runner</a>

Play trae incorporado un _ejecutador de pruebas_ que le permite correr las pruebas de su aplicación. Se trata de una simple consola web que le permite seleccionar los tests a correr.

A continuación puede ver el test runner en acción.

!images/guide10-1!

h2. <a name="threadSafe">Thread-safe</a>

"Ayudanos a completar el glosario":translation: Incluir aquí la definición de Thread-safe.
