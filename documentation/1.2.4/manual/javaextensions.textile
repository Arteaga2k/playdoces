h1. Extensiones Java

Las extensiones Java agregan a nuestros objetos, métodos muy convenientes para utilizar en las plantillas de las vistas, haciendo a nuestras expresiones un poco más expresivas.

Los ejemplos muestran una expresión de ejemplo en una plantilla, y su resultado en la siguiente línea.



h2. <a name="collection">Extensiones de colecciones</a>


h3. <a name="join">join (separador)</a>

Concatena las entradas de nuestra colección, con el separador dado entre cada una de ellas. Devuelve: @String@.

bc. ${['red', 'green', 'blue'].join('/')}
red/green/blue


h3. <a name="last">last()</a>

Nos devuelve el último elemento en la lista, en forma de @Object@.

bc. ${['red', 'green', 'blue'].last()}
blue


h3. <a name="pluralize">pluralize()</a>

Devuelve una ‘s’ cuando el tamaño de la colección no es 1. Devuelve: @String@.

bc. colour${['red', 'green', 'blue'].pluralize()} 
colours


h3. <a name="pluralize-plural">pluralize(plural)</a>

Devuelve el plural dado cuando el tamaño de la colección no es 1. Devuelve: @String@.

bc. box${['red', 'green', 'blue'].pluralize('es')}
boxes


h3. <a name="pluralize-singular-plural">pluralize(singular, plural)</a>

Devuelve la forma del plural dado cuando el tamaño de la colección no es 1; devuelve el singular dado cuando el tamaño es igual a 1. Devuelve: @String@.

bc. journ${['red'].pluralize('al', 'aux')}
journal
 
journ${['red', 'green', 'blue'].pluralize('al', 'aux')}
journaux



h2. <a name="date">Extensiones de fechas</a>


h3. <a name="format">format(format)</a>

Formatea la fecha utilizando el patrón de formato dado. Devuelve: @String@.

bc. ${new Date(1275910970000).format('dd MMMM yyyy hh:mm:ss')}
07 June 2010 01:42:50


h3. <a name="format-language">format(format, language)</a>

Formatea la fecha utilizando el patrón de formato dado, en el lenguaje indicado. Devuelve: @String@.

bc. ${new Date(1275910970000).format('dd MMMM yyyy hh:mm:ss', 'fr')}
07 juin 2010 01:42:50


h3. <a name="since">since()</a>

Formatea la fecha como un tiempo relativo a ahora. Por ejemplo **Hace 3 minutos**. Devuelve: @String@.

bc. ${new Date(new Date().getTime() - 1000000).since()}
16 minutes ago

Puede retocar la salida utilizando los siguientes mensajes: @since.seconds@, @since.minutes@, @since.hours@, @since.days@, @since.months@ and @since.years@.  


h3. <a name="since-condition">since(condition)</a>

Formatea la fecha como un tiempo relativo a ahora. Si la condición es verdadera, las fechas de hace un mes o más, son formateadas como fecha. Nos devuelve: @String@.

Además de los mensajes que acepta @since()@ para retocar la salida, puede utilizar @since.format@ para fechas de hace  más de un mes.

bc. ${new Date(1262350000000).since(false)}
5 months ago
 
${new Date(1262350000000).since(true)}
Jan 1, 2010



h2. <a name="long">Extensiones del tipo Long</a>


h3. <a name="asdate">asdate(format)</a>

Formatea una estampilla de tiempo (timestamp) como una fecha. Devuelve: @String@ - una fecha formateada. 

bc. ${1275910970000.asdate('dd MMMM yyyy hh:mm:ss')}
07 June 2010 01:42:50


h3. <a name="asdate-language">asdate(format, language)</a>

Formatea una estampilla de tiempo (timestamp) como una fecha, en el lenguaje dado. Devuelve: @String@ - una fecha formateada. 

bc. ${1275910970000.asdate('dd MMMM yyyy hh:mm:ss', 'fr')}
07 juin 2010 01:42:50


h3. <a name="formatSize">formatSize()</a>

Formatea un número de bytes como el tamaño de un archivo, con unidades.

bc. ${726016L.formatSize()}
709KB




h2. <a name="map">Extensiones de mapas (Maps)</a>


h3. <a name="asAttr">asAttr()</a>

Formatea las claves y valores de un mapa como atributos HTML. Devuelve: @play.templates.Template.ExecutableTemplate.RawData@.

bc. ${[id:'42', color:'red'].asAttr()}
id="42" color="red" 


h3. <a name="asAttr-condition">asAttr(condition)</a>

Formatea las claves y valores de un mapa como atributos HTML, sólo si la condición es verdadera. Devuelve: @play.templates.Template.ExecutableTemplate.RawData@.

bc. ${[id:'42', color:'red'].asAttr(true)}
id="42" color="red" 



h2. <a name="number">Extensiones de números</a>


h3. <a name="number-divisibleBy">divisibleBy(divisor)</a>

Devuelve verdadero si el número es divisible por el número dado, el divisor. Devuelve:  @boolean@.

bc. ${42.divisibleBy(7)}
true


h3. <a name="number-format">format(format)</a>

Formatea el número utilizando el formato del patrón de número dado. Devuelve: @String@.

bc. ${42.format('000.00')}
042.00


h3. <a name="number-formatCurrency">formatCurrency(currencyCode)</a>

Formatea el número como el tipo de moneda para el código de moneda dado, por ejemplo **EUR**. Devuelve: @String@.

bc. ${42.formatCurrency('EUR').raw()}
&euro; 42.00


h3. <a name="number-page">page(pageSize)</a>

Devuelve el número de página, para el tamaño de página dado, interpretando el número como un índice. Devuelve: @Integer@.

bc. ${42.page(10)}
5


h3. <a name="number-pluralize">pluralize()</a>

Devuelve una ‘s’ cuando el número no es 1. Devuelve: @String@.

bc. colour${['red', 'green', 'blue'].pluralize()} - colour${3.pluralize()} 
colours - colours


h3. <a name="number-pluralize-plural">pluralize(plural)</a>

Devuelve el plural dado cuando el número no es 1. Devuelve: @String@.

bc. box${3.pluralize('es')}
boxes


h3. <a name="number-pluralize-singular-plural">pluralize(singular, plural)</a>

Devuelve el plural dado cuando el número no es 1; devuelve el singular dado cuando el número es igual a 1. Devuelve: @String@. 

bc. journ${1.pluralize('al', 'aux')}
journal
 
journ${3.pluralize('al', 'aux')}
journaux



h2. <a name="object">Extensiones de objeto</a>


h3. <a name="addSlashes">addSlashes()</a>

Escapea agregando barras invertidas, a las comillas simples y a las dobles en la representación de @String@ del objeto. Devuelve: @String@.

bc. ${"single quote (')".addSlashes().raw()} ${'double quote (")'.addSlashes().raw()}
single quote (\') double quote (\")


h3. <a name="capAll">capAll()</a>

Cambia a mayúscula la primer letra de cada palabra en la representación de @String@ del objeto. Devuelve: @String@.

bc. ${"lorum ipsum dolor".capAll()}
Lorum Ipsum Dolor


h3. <a name="capFirst">capFirst()</a>

Cambia a mayúscula la primer letra de la primer palabra en la representación de @String@ del objeto. Devuelve: @String@.

bc. ${"lorum ipsum dolor".capFirst()}
Lorum ipsum dolor


h3. <a name="cut">cut(substring)</a>

Elimina todas las ocurrencias de la sub-cadena dada. Devuelve: @String@.

bc. ${"lorum ipsum dolor".cut('um')}
lor ips dolor


h3. <a name="escape">escape()</a>

Escapea caractéres HTML reservados en la representación de @String@ del objeto. Devuelve: @String@.

bc. ${"The <blink>tag</blink> is evil".escape().raw()}
The &lt;blink&gt;tag&lt;/blink&gt; is evil


h3. <a name="nl2br">nl2br()</a>

Reemplaza los caractéres de nueva linea (\n) con su correspondiente tag HTML @br@. Devuelve: @String@.

bc. ${"one\ntwo".nl2br()}
one<br/>two

Note que en la salida no se escapea el contenido HTML, por lo que el tag @br@ no estará escapeado en la salida. Esto quiere decir que probablemente usted quiera utilizar "escape()":#escape para las entradas del usuario:

bc. ${userInput.escape().nl2br()}


h3. <a name="raw">raw()</a>

Devuelve el objeto sin escapear. Devuelve: @play.templates.Template.ExecutableTemplate.RawData@.

bc. ${'<'}
&lt;
 
${'<'.raw()}
<


h3. <a name="raw-condition">raw(condition)</a>

Devuelve el objeto sin escapear, si la condición es verdadera. Devuelve: @play.templates.Template.ExecutableTemplate.RawData@.

bc. ${'<'.raw(true)}
<


h3. <a name="yesNo">yesNo('yes', 'no')</a>

Devuelve el primer parámetro (‘yes’) si el objeto es evaluado como verdadero, y el segundo en caso contrario. Devuelve: @String@.

bc. ${"".yesno('yes', 'no')}
no
 
${"not empty".yesno('yes', 'no')}
yes


h2. <a name="string">Extensiones de Cadena de caractéres</a>


h3. <a name="asXml">asXml()</a>

Parsea la cadena XML dada. Devuelve: @groovy.util.slurpersupport.GPathResult@.

h3. <a name="camelCase">camelCase()</a>

Formatea la cadena dada al estilo CamelCase, como si fuese el nombre de una clase Java. Devuelve: @String@.

bc. ${"lorum ipsum dolor".camelCase()}
LorumIpsumDolor


h3. <a name="capitalizeWords">capitalizeWords()</a>

Cambia a mayúscula la primer letra de cada palabra de la cadena. Devuelve: @String@.

bc. ${"lorum ipsum dolor".capitalizeWords()}
Lorum Ipsum Dolor


h3. <a name="escapeHtml">escapeHtml()</a>

Escapea carctéres HTML reservados. Devuelve: @String@.

bc. ${"The <blink>tag</blink> is evil".escapeHtml().raw()}
The &lt;blink&gt;tag&lt;/blink&gt; is evil


h3. <a name="escapeJavaScript">escapeJavaScript()</a>

Escapea caractéres JavaScript reservados. Devuelve: @String@.

bc. ${"single quote (') double quote (\")".escapeJavaScript().raw()}
single quote (\') double quote (\")


h3. <a name="escapeXml">escapeXml()</a>

Escapea caractéres XML reservados. Devuelve: @String@.

bc. ${"<>\"&".escapeXml().raw()}
&lt;&gt;&quot;&amp;


h3. <a name="noAccents">noAccents()</a>

Remueve los acentos de las letras de la cadena dada. Devuelve: @String@.

bc. ${"Stéphane Épardaud".noAccents()}
Stephane Epardaud


h3. <a name="pad">pad(length)</a>

Rellena la cadena con @&nbsp;@ hasta alcanzar el tamaño dado. Devuelve: @string@.

bc. ${"x".pad(4).raw()}
x&nbsp;&nbsp;&nbsp;


h3. <a name="slugify">slugify()</a>

Formatea la cadena al estilo ‘slug’(babosa) para utilizar en URLs evitando los caractéres URL reservados. Devuelve: @String@.

bc. ${"The Play! framework’s manual".slugify()}
the-play-framework-s-manual


h3. <a name="urlEncode">urlEncode()</a>

Escapea caractéres reservados de query string. Devuelve: @String@.

bc. ${"!@#\$%^&()".urlEncode()}
%21%40%23%24%25%5E%26%28%29


h2. <a name="string-array">Extensiones de arreglos de cadenas</a>


h3. <a name="add">add(value)</a>

Agrega el valor dado al final del arreglo. Devuelve: @String[]@.

bc. ${(["red", "green", "blue"] as String[]).add('pink').join(' ')}
red green blue pink


h3. <a name="contains">contains(string)</a>

Devuelve verdadero si el arreglo contiene la cadena dada. Devuelve: @boolean@.

bc. ${(['red', 'green', 'blue'] as String[]).contains('green')}
true


h3. <a name="remove">remove(string)</a>

Elimina del arreglo la cadena dada. Devuelve: @String[]@.

bc. ${(['red', 'green', 'blue'] as String[]).remove('green').join(' ')}
red blue


