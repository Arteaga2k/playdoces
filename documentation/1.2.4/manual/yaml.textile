h1. YAML

h2. <a name="syntax">Sintaxis YAML</a>

En las pruebas de las aplicaciones, comunmente, se utilizan estructuras de datos que consisten en un modelo de objetos relacionados los cuales pueden ser tediosos de crear programáticamente con Java. Play incluye un parser "YAML":http://en.wikipedia.org/wiki/YAML que hace esta tarea sumamente sencilla.

Cree en el directorio @conf@ un archivo YAML como el siguiente:

bc.. City(capitalfederal):
    name: Capital Federal
    state: Buenos Aires

User(john):
    name: "John Smith"
    email: john@john.com
    lang: es
    created: 2007-01-01

User(frank):
    name: "Frank Franken"
    email: frank@frank.com
    lang: en
    created: 2007-08-05

Neighborhood(villalugano):
    name: Villa Lugano
    city: capitalfederal
    tags: "shopping, cafes"
    users: [john, frank]

Neighborhood(coghlan):
    name: Coghlan
    city: capitalfederal
    tags: "cafes, bars"
    users: [john]

p. La sintaxis que utiliza Play para los archivos YAML varía ligeramente de la estándar. Cada párrafo debe comenzar con el nombre de la clase del modelo (por ejemplo @Neighborhood@) seguido de un identificador entre paréntesis (por ejemplo @villalugano@), el cual se podrá utilizar para referenciar el objeto dentro del archivo. Esto es diferente a la sintaxis estándar para archivos YAML, en la cual se usa el ampersand (**&**) para indicar una referencia.

Play utiliza la librería "SnakeYAML":http://code.google.com/p/snakeyaml/, la cual tiene una excelente "documentación":http://code.google.com/p/snakeyaml/wiki/Documentation#YAML_syntax colmada de ejemplos.

h2. <a name="model">Model classes</a>

El archvo YAML puede contener relaciones uno-a-muchos, muchos-a-uno y muchos-a-muchos. Estas relaciones deben ser explícitamente anotadas en las clases del modelo de datos, y debe indicar cuál de ellas es la parte "dueña" de la relación.

p. @City.java@

bc. package models;

import java.util.List;
import javax.persistence.*;
import play.db.jpa.Model;

@Entity
public class City extends Model {
    public String name;
    public String state;
    
    // bi-directional one-to-many, inverse side
    @OneToMany(mappedBy = "city", cascade = CascadeType.ALL)
    public List<Neighborhood> neighborhoods;
}

p. @Neighborhood.java@

bc. package models;

import java.util.List;
import javax.persistence.*;
import play.db.jpa.Model;

@Entity
public class Neighborhood extends Model {
    public String name;
    
    // bi-directional one-to-many, owning side
    @ManyToOne
    public City city;
    
    public String tags;
    
    // owning side
    @ManyToMany
    public List<User> users;
}

p. @User.java@

bc. package models;

import java.util.*;
import javax.persistence.*;
import play.db.jpa.Model;

@Entity
//@Table(name = "`user`")
public class User extends Model {
    public String name;
    public String email;
    public String lang;
    public Date created;
    
    // inverse side of the relation
    @ManyToMany(mappedBy = "users")
    public List<Neighborhood> neighborhoods;
}


p(note). Tenga en cuenta que si utiliza PostgreSQL tendrá que indicar el nombre de la tabla @user@ escapando los caracteres, ya que @user@ es una palabra reservada.

h2. <a name="loading">Cargando la estructura de datos en su aplicación</a>

Típicamente, usted cargará la estructura de datos definida en el archivo YAML como parte de una "prueba unitaria":test#aFixturesa. Pero en algunas ocasiones posiblemente necesite cargar los datos en su base con información específica, bajo otras circustancias. Por ejemplo, "cuando su aplicación se inicia":jobs#aBootstrapjoba por  vez primera.

bc.. import play.*;
import play.jobs.*;
import play.test.*;
import models.*;

@OnApplicationStart
public class Bootstrap extends Job {
    public void doJob() {
        // Check if the database is empty
        if(User.count() == 0) {
            Fixtures.loadModels("initial-data.yml");
        }
    }
}

p. Los objetos serán creados en la base de datos, y podrá acceder a ellos como lo haría con cualquier objeto del modelo de datos.

bc. City city = City.all().first();
List<Neighborhood> neighborhoods = city.neighborhoods;


 