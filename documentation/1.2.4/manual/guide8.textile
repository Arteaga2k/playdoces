h1. Agregando autenticación

Ahora que tenemos un área de administración necesitamos agregarle la autenticación. Por suerte, Play tiene un módulo para esto, cuyo nombre es **Secure**.

h2. <a>Habilitando el módulo Secure</a>

Habilite el módulo **Secure** en el archivo @yabe/conf/application.conf@ y reinicie la aplicación.

bc. # Importar el módulo Secure
module.secure=${play.path}/modules/secure

Después de reiniciar, Play debería decir que el modulo está cargado.

El módulo **Secure** viene con un conjunto de rutas ('_routes_') por defecto que usted puede habilitar fácilmente en el archivo @yabe/conf/routes@ (o también podríamos declarar nuestras propias rutas):

bc. # Importar rutas de Secure
*       /                                       module:secure

h2. <a>Protegiendo los controladores de administración (_admin_)</a>

El módulo proporciona un controlador llamado @controllers.Secure@ que declara todos los "interceptores":glossary#interceptor necesarios. Por supuesto, nosotros podríamos simplemente crear nestro(s) controlador(es) que herede(n) de @controllers.Secure@, pero debido a que la herencia en Java tiene sus limitaciones, esto sería problemático.

Por lo tanto, en vez de heredar directamente del controlador @Secure@, podemos hacer anotaciones en los controladores de administración usando la anotación <code>@With</code> para decirle a Play que invoque al "interceptor":glossary#interceptor correspondiente:

bc. package controllers;
 
import play.*;
import play.mvc.*;
 
@With(Secure.class)
public class Posts extends CRUD {    
}

Repita el procedimiento para los controladores @Comments@, @Users@ y @Tags@.

Ahora si intenta acceder a cualquier acción de administración, debería ver una página para inicio de sesión:

!images/guide8-1!

De hecho, por ahora puede probar con cualquier combinación de nombre de usuario y contraseña, y funcionará.

h2. <a>Personalizando el proceso de autenticación</a>

La aplicación debe proporcionar una instancia de @controllers.Secure.Security@ para personalizar el proceso de autenticación. Creando nuestra versión particular de esta clase seremos capaces de especificar con exactitud cómo deberían autenticarse los usuarios.

Cree el archivo @yabe/app/controllers/Security.java@ y redefina el método @authenticate()@:

bc. package controllers;
 
import models.*;
 
public class Security extends Secure.Security {
	
    static boolean authenticate(String username, String password) {
        return true;
    }
    
}

Como ya tenemos los objetos User como parte del modelo del blog, es fácil implementar una versión de este método que funcione:

bc. static boolean authenticate(String username, String password) {
    return User.connect(username, password) != null;
}

Ahora vaya a "http://localhost:9000/logout":http://localhost:9000/logout para finalizar la sesión de usuario e intente iniciar una nueva con uno de los usuarios importados desde el archivo @initial-data.yml@, como por ejemplo: <code>bob@gmail.com/secret</code>.

h2. <a>Ajustando el área de administración</a>

Hemos creado el área de administracion usando el módulo CRUD, pero todavía no está bien integrada con la interfaz de usuario (apariencia) del blog. Por lo que empazaremos a trabajar en una nueva área de administración, la cual dará a cada autor acceso a sus propias publicaciones (_posts_). Todas las funciones CRUD de administración seguirán disponibles para los usuarios con perfil (_profile_) super administrador.

Vamos a crear un nuevo controlador @Admin@ para la parte de administración:

bc.  package controllers;
 
import play.*;
import play.mvc.*;
 
import java.util.*;
 
import models.*;
 
@With(Secure.class)
public class Admin extends Controller {
    
    @Before
    static void setConnectedUser() {
        if(Security.isConnected()) {
            User user = User.find("byEmail", Security.connected()).first();
            renderArgs.put("user", user.fullname);
        }
    }
 
    public static void index() {
        render();
    }
    
}

Y ajuste la definición de rutas (_routes_) en @yabe/conf/routes@:

bc. # Administracion
GET     /admin/?                                Admin.index
*       /admin                                  module:crud

Recuerde que el orden es importante en el archivo @routes@; ya que se utiliza la primera línea que concuerde con la petición HTTP. Esto significa que las entradas que corresponden al controlador @Admin@ deben venir antes de la segunda línea mostrada en el código de arriba, la cual corresponde a todas las otras peticiones de las páginas @/admin@ del módulo CRUD. Por otro lado, la dirección @/admin/@ invocará la acción @CRUD.index@ en vez de @Admin.index@.

Ahora enlace el texto ‘Log in to write something’ de la plantilla @yabe/app/views/main.html@ a este controlador:

bc. …
<ul id="tools">
    <li>
        <a href="@{Admin.index()}">Log in to write something</a>
    </li>
</ul>
…

Lo último para lograr que todos estos ajustes funcionen es crear la plantilla @yabe/app/views/Admin/index.html@. Vamos a comenzar con algo simple:

bc. Welcome ${user}!

Ahora, vaya al página de inicio (_home_) del blog, haga clic en el enlace ‘Log in to write something’ y debería ver la nueva área de administración:

!images/guide8-2!

¡Buen comienzo! Pero como tendremos varias páginas en esta área de administración, necesitamos una super-plantilla. Vamos a crearla en el archivo @yabe/app/views/admin.html@:

bc. <!DOCTYPE html>
<html>
    <head>
        <title>Administration</title>		
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
        #{get 'moreStyles' /}	
        <link rel="stylesheet" type="text/css" media="screen" 
                href="@{'/public/stylesheets/main.css'}" />
        <link rel="shortcut icon" type="image/png" 
                href="@{'/public/images/favicon.png'}" />
        <script src="@{'/public/javascripts/jquery-1.4.2.min.js'}"></script>
        <script src="@{'/public/javascripts/jquery.tools-1.2.5.toolbox.expose.min.js'}"></script>
    </head>
    <body id="admin">
        
        <div id="header">
            <div id="logo">
                yabe. <span>administration</span>
            </div>
            <ul id="tools">
                <li>
                    <a href="@{Secure.logout()}">Log out</a>
                </li>
            </ul>
        </div>
        
        <div id="main">
            #{doLayout /} 
        </div>
        
        <p id="footer">
            Yabe is a (not so) powerful blog engine built with the 
            <a href="http://www.playframework.org">Play framework</a>
            as a tutorial application.
        </p>
        
    </body>
</html>

Como pueden ver, se parece bastante a la plantilla usada por la parte frontal del sistema de blog. En esta plantilla se ha reemplazado el enlace de **Log in** por el enlace **Log out** que invoca la accion @logout@ del controlador @Secure@ que proporciona el módulo Secure.

Ahora vamos a utilizarla en la plantilla @yabe/app/views/Admin/index.html@:

bc. #{extends 'admin.html' /}
 
Welcome ${user}!

¡Y actualice la página!

!images/guide8-3!

Si hace clic en el enlace **Log out** la aplicación lo enviará de nuevo al formulario de inicio de sesión:

!images/guide8-4!

Ese es el comportamiento por defecto del módulo Secure para manejar los eventos de cierre de sesión (_log out_). Pero esto se puede personalizar facilmente redefiniendo el método @onDisconnected()@ en la clase @controllers.Security@:

bc. static void onDisconnected() {
    Application.index();
}

Puede hacer lo mismo para el evento @onAuthenticated()@:

bc. static void onAuthenticated() {
    Admin.index();
}

h2. <a>Agregando roles</a>

Realmente, necesitamos dos areas de administración: una para los simples editores y otra para el super administrador. Como puede observar, el objeto @User@ del modelo tiene un campo @isAdmin@ que indica si el usuario tiene derechos de super administrador o no.

El módulo Secure no solo provee manejo de autenticación (_authentication_) sino tambien manejo de autorización (_authorization_), a través de los llamados perfiles (@profiles@). Para crear un perfil de administrador (@admin@), solo necesita redefinir el método @check()@ de la clase @controllers.Security()@:

bc. static boolean check(String profile) {
    if("admin".equals(profile)) {
        return User.find("byEmail", connected()).<User>first().isAdmin;
    }
    return false;
}

Ahora podemos mostrar un menú de administración si el usuario tiene el rol (_role_) de administrador (_admin_). Modifique el archivo @views/admin.html@ para integrar un menú en la parte superior de la página:

bc. …
<div id="main">
    
    <ul id="adminMenu">
        <li class="${request.controller == 'Admin' ? 'selected' : ''}">
            <a href="@{Admin.index()}">My posts</a>
        </li>
        #{secure.check 'admin'}
            <li class="${request.controller == 'Posts' ? 'selected' : ''}">
                <a href="@{Posts.list()}">Posts</a>
            </li>
            <li class="${request.controller == 'Tags' ? 'selected' : ''}">
                <a href="@{Tags.list()}">Tags</a>
            </li>
            <li class="${request.controller == 'Comments' ? 'selected' : ''}">
                <a href="@{Comments.list()}">Comments</a>
            </li>
            <li class="${request.controller == 'Users' ? 'selected' : ''}">
                <a href="@{Users.list()}">Users</a>
            </li>
        #{/secure.check}
    </ul>
    
    #{doLayout /} 
</div>
…

Note como usamos el tag @#{secure.check /}@ para mostrar parte del menú solo a los usuarios con el rol @admin@.

!images/guide8-5!

Sin embargo ¡esto no es suficiente para resguardar la sección CRUD del área de administración! Si un usuario conoce la URL aún puede acceder a esa parte del sitio. Por lo que, también, tenemos que proteger los controladores; lo cual podemos hacer fácilmente usando la anotación <code>@Check</code>. Por ejemplo, para el controlador @Posts@ haríamos lo siguiente:

bc. package controllers;
 
import play.*;
import play.mvc.*;
 
@Check("admin")
@With(Secure.class)
public class Posts extends CRUD {    
}

Repita el procedimiento para los controladores @Tags@, @Comments@ y @Users@. Ahora pruebe cerrando sesión e iniciando una nueva con un usuario estándar (tal como <code>jeff@gmail.com/secret</code>). No debería ver los enlaces de administración CRUD. Y si intenta acceder directamente al URL "http://localhost:9000/admin/users":http://localhost:9000/admin/users obtendrá una respuesta HTTP **403 Forbidden**.

!images/guide8-6!

h2. <a>Personalizando la apariencia de las páginas CRUD</a>

Esto es divertido, pero cuando vamos a la parte CRUD del área de administración perdemos el estilo (_layout_) de nuestra página inicial. Esto se debe a que el módulo CRUD proporciona su propio estilo. Pero por supuesto nosotros podemos redefinirlo. Use el siguiente comando Play:

bc. play crud:ov --layout

Y verá una nueva plantilla @/yabe/app/views/CRUD/layout.html@. Vamos a reemplazar su contenido para integrarla finamente con nuestro estilo descrito en el archivo @admin.html@:

bc. #{extends 'admin.html' /}
#{set 'moreStyles'}
    <link rel="stylesheet" type="text/css" media="screen" 
        href="@{'/public/stylesheets/crud.css'}" />
#{/set}
 
<div id="crud">
 
    #{if flash.success}
    	<div class="crudFlash flashSuccess">
    		${flash.success}
    	</div>
    #{/if}
    #{if flash.error || error}
    	<div class="crudFlash flashError">
    		${error ?: flash.error}
    	</div>
    #{/if}
 
    <div id="crudContent">
    	#{doLayout /}
    </div>
 
</div>

Como pueden ver, reutilizamos @crud.css@ y lo incluimos en @admin.html@ usando el mecanismo para manejar variables de plantillas **get/set**. Ahora si prueba la parte CRUD del área de administración, verá que está correctamente integrada con el estilo del área de administración:

!images/guide8-7!

!images/guide8-9!

h2. <a>Aplicando estilo a la página de inicio de sesión</a>

Ya el área de administración está casi coherente desde el punto de vista gráfico. Lo último que queda por ajustar es la página de inicio de sesión. Como siempre, esto es fácilmente personalizable haciendo una redefinicion del archivo CSS que usa por defecto:

bc. play secure:ov --css

Dejaremos el archivo CSS tal como está, pero importaremos nuestro @main.css@ al principio. Solo agregue esto en la primera línea del archivo @yabe/public/stylesheets/secure.css@:

bc. @import url(main.css);
…

Y personalice los mensajes de la página de inicio de sesión, agregando estás líneas al archivo @yabe/conf/messages@:

bc. secure.username=Your email:
secure.password=Your password:
secure.signin=Log in now

!images/guide8-8!

p(note). Continúa con: %(next)"Creando un área para editores personalizada":guide9%.
