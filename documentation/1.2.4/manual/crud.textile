h1. CRUD: Generando la administración

El módulo CRUD (Create, Read, Update, Delete) genera una interfaz completamente usable para tus objetos JPA.

h2. <a name="usage">Utilizando el módulo CRUD</a>

Veamos un simple ejemplo de cómo manejar la información de los usuarios utilizando el módulo CRUD.


h3. <a name="enable">Habilitando el módulo CRUD en nuestra aplicación</a>

Para habilitar el módulo CRUD, agrega al archivo @/conf/dependencies.yml@ la siguiente línea luego de @require:@ 

bc. require:
    - play -> crud

Ahora ejecuta el comando @play dependencies@ para resolver la dependencia del nuevo módulo.


h3. <a name="routes">Importando las rutas CRUD por defecto</a>

En el archivo @conf/routes@, importa el módulo por defecto agregando ésta línea:

bc. # Import CRUD routes
*     /admin           module:crud

Esto agrega varias rutas por cada uno de tus controladores CRUD, que agregaremos a continuación.

p(note). **Ten en cuenta** que no es obligatorio utilizar el archivo de rutas por defecto. Puedes definir tu propio archivo de rutas, o también mezclarlos.


h3. <a name="model">Creando una clase User</a>

El módulo CRUD provee una interfaz de usuario para las clases del módelo. Comenzaremos creando una interfaz de usuario para la clase User, que es una entidad "JPA":jpa:

bc. package models;
 
import play.*;
import play.db.jpa.*;
 
import javax.persistence.*;
import java.util.*;
 
@Entity
public class User extends Model {
 	
	public String name;
	public String email;
	public String address;
 	
}

h3. <a name="controller">Creando el controlador de Users</a>

Ahora, crearemos un simple controlador que herede del controlador CRUD. Esto es como un ‘marcador’ que el módulo CRUD utiliza para generar rutas.

bc. package controllers;
 
public class Users extends CRUD {
   
}

Ahora abre "http://localhost:9000/admin":http://localhost:9000/admin  y deberías ver el área de administración de User.

!images/crud1!

El nombre de la clase del controlador debe ser igual al nombre de la clase del modelo que queremos administrar, pero con una ‘s’ al final. Si quieres utilizar otro nombre, puedes hacerlo utilizando una anotación.

bc. package controllers;
 
import models.User;
 
@CRUD.For(User.class)
public class AdminUsers extends CRUD {
   
}


h3. <a name="view">El formulario de User</a>

Clickea el botón **Add** y deberías ver el formulario de User.

!images/crud2!

Ahora podemos agregar algunas reglas de validación a la clase Usuario:

bc. package models;
 
import play.*;
import play.db.jpa.*;
 
import javax.persistence.*;
import java.util.*;
 
import play.data.validation.*;
 
@Entity
public class User extends Model {
 	
   @Required
   @MinSize(8)
   public String name;
	
   @Required
   @Email
   public String email;
	
   @Required
   @MaxSize(1000)
   public String address;
 
   public String toString() {
      return email;
   }
	
}

Refresca el formulario y verás que las validaciones son aplicadas automáticamente.

!images/crud3!

h3. <a name="labels">Cambiando las etiquetas del formulario</a>

Agrega éstas líneas al archivo @conf/messages@ de tu aplicación:

bc. name=Name
email=Email address
address=Postal address

y refresca el formulario:

!images/crud4!

h3. <a name="list">Creando un usuario y retocando la vista de lista</a>

Por defecto, la vista de lista utiliza sólo una columna que nos muestra el resultado del método @toString()@ del objeto.

!images/crud5!

Para retocar ésta vista, necesitamos crear el template @/app/views/Users/list.html@ en nuestra aplicación.

Abre una línea de comandos, sitúate en el directorio de la aplicación y tipea:

bc. play crud:ov --template Users/list

Esto copiará el template por defecto @list.html@ de CRUD al template @Users/list.html@ de nuestra aplicación, sobreescribiéndolo si estuviese presente.

Edita el template así:

bc. #{extends 'CRUD/layout.html' /}
 
<div id="crudList" class="${type.name}">
	
	<h2 id="crudListTitle">&{'crud.list.title', type.name}</h2>
 
	<div id="crudListSearch">
		#{crud.search /}
	</div>
 
	<div id="crudListTable">
		#{crud.table fields:['email', 'name'] /}
	</div>
	
	<div id="crudListPagination">
		#{crud.pagination /}
	</div>
	
	<p id="crudListAdd">
		<a href="@{blank()}">&{'crud.add', type.modelName}</a>
	</p>
</div>

y refresca la lista.

!images/crud6!


h3. <a name="custom">Mostrando campos retocados: el tag crud.custom</a>

Puedes ir un poco más lejos retocando la manera en que se muestra cada campo de la entidad @User@ en las vistas de lista y formulario.

Para retocar un campo, utiliza el tag @#{crud.custom}@:

bc. #{crud.table fields:['name', 'company']}
 
   #{crud.custom 'company'}
     <a href="@{Companies.show(object.company.id)}">
      	 ${object.company.name}
     </a>
   #{/crud.custom}
 
#{/crud.table}

También puedes agregar columnas o inputs de formulario definiendo tus propios manejadores: 

bc. #{crud.table fields:['name', 'company', 'edit']}
 
   #{crud.custom 'company'}
      <a href="@{Companies.show(object.company.id)}">${object.company.name}</a>
   #{/crud.custom}
 
   #{crud.custom 'edit'}
      <a href="@{Users.edit(object.id)}">Edit</a>
   #{/crud.custom}
 
#{/crud.table}


h2. <a name="collections">Listas de Strings y de enumeración</a>

El módulo CRUD muestra las listas como un campo de texto. En éste campo de texto, la lista está representada por una lista de Strings separadas por comas. Por ejemplo:

bc. @Entity
public class Account extends Model {
 
      @CollectionOfElements
      public Set<ContentType> contentTypes;
 
      @CollectionOfElements
      public Set<String> usernames;
 
      public Account(Set<String> usernames) {
            super();
            this.usernames = usernames;
      }
}

Lo veremos como "myEnumId1","myEnumId2" para contentTypes y "string1","string2"  para los nombres de usuario. Por definición, ésto es lo primero que deberías retocar en tu módulo CRUD.

h2. <a name="objecttype">Retocando las vistas _show_ y _blank_ de manera genérica</a>

La influencia central en el comportamiento de las vistas de CRUD es el @ObjectType@ de cada campo.
Entonces, si quisieras cambiar el comportamiento del módulo CRUD de una manera genérica, por ejemplo esconder campos con la anotación <code>@Version</code>, puedes crear tu propia clase @ObjectType@. Deberás declarar un método estático en tu controlador o en una superclase del mismo.

bc. protected static ObjectType createObjectType(Class<? extends Model> type) {
   return new VersionObjectType(type);
} 

Aquí tenemos un ejemplo completo:

bc.   public class CustomAdminCompany extends CRUD {
   protected static ObjectType createObjectType(Class<? extends Model> type) {
      return new VersionObjectType(type);
   }
   
   public static class VersionObjectType extends ObjectType {
      
      private final String versionColumn;
      
      public VersionObjectType(Class<? extends Model> modelClass) {
         super(modelClass);
         versionColumn = getVersionColumnName(modelClass);
      }
      private String getVersionColumnName(Class modelClass) {
         Class c = modelClass;
         try {
            while (!c.equals(Object.class)) {
               for (Field field : c.getDeclaredFields()) {
                  if (field.isAnnotationPresent(Version.class)) {
                     return field.getName();
                  }
               }
               c = c.getSuperclass();
            }
         } catch (Exception e) {
            throw new UnexpectedException("Error while determining the "
               + "object @Version for an object of type " + modelClass);
         }
         return null;
      }
 
      @Override
      public List<ObjectField> getFields() {
         List<ObjectField> result = super.getFields();
         for (ObjectField objectField : result) {
            if (objectField.name.equals(versionColumn)) {
               objectField.type = "hidden";
            }
         }
         return result;
      }
   }   
}

Pero eso no es todo; también puedes retocar @findPage@ y otros métodos. Echa un vistazo al código fuente.

h2. <a name="commands">Comandos</a>

El módulo CRUD nos provee el comando *crud:override* que puedes utilizar en la línea de comandos para sobreescribir los templates por defecto. Esto funciona porque CRUD carga los templates que estén presentes en tu aplicación en lugar de los propios. También puedes utilizar @crud:ov@ en lugar de @crud:override@.

h3. play crud:override --template [path]

Copia el template especificado en el path, por ejemplo @Users/list@, al directorio @app/views/CRUD/@ de tu aplicación. También puedes utilizar @-t@ en lugar de @--template@.

h3. play crud:override --layout

Sobreescribe el template de la página principal, @layout.html@.

h3. play crud:override --css

Sobreescribe la hoja de estilo, @crud.css@, copiándola al directorio @public/stylesheets/@.



h2. <a name="limitation">Limitación</a>

El módulo CRUD muestra relaciones bidireccionales sólo en una de las dos entidades: aquella que no posea el atributo @mappedBy@
