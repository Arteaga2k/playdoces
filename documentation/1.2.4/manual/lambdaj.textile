h1. Algunas técnicas de programación funcional

Play soporte el lenguaje de programación Scala. Una de la grandes ventajas (mas no la única) de Scala es que es una mezcla de lenguaje imperativo/funcional con la capacidad de resolver muchos problemas en una forma funcional. 

Pero ahora, ¿Qué sucede si usted prefiere seguir usando Java con Play? ¿Podríamos traer a Java algunas de las estupendas utilidades de Scala? Esta sección describe el soporte para "lambdaj":http://code.google.com/p/lambdaj/ de Play.

El objetivo principal de lambdaj es eliminar parcialmente la carga de tener que escribir ciclos @while@ (con frecuencia, anidados y pobremente legibles) para recorrer colecciones de objetos. En el sitio web de lambdaj se puede leer:

bq. ¿Cuántas veces has leído o escrito las mismas dos o tres líneas de código que frecuentemente parecen ir juntas, y aunque operan sobre objetos diferentes, se siente como si fuera lo mismo? ¿Y con que frecuencia estas repeticiones involucran alguna clase de recorrido o, hablando en términos generales, manipulación de colecciones? Estas repeticiones en el código son algo que los desarrolladores, eventualmente, aprenden a filtrar e ignorar cuando leen el código, una vez que han descubierto donde se ubican las partes interesantes. Pero incluso si los desarrolladores logran acostumbrarse, esto los ralentiza. Código como ese está claramente escrito para que las computadoras lo ejecuten, no para que los desarrolladores lo lean.
 
 lambdaj es un librería que facilita la solución de este problema permitiendo manipular colecciones en una forma seudofuncional y usando declaraciones estáticas. En nuestra experiencia el recorrido de una colección, especialemente en ciclos anidados, es a menudo propenso a errores y hace el código menos legible. El propósito de esta librería es aligerar estos problemas empleando algunas técnicas de programación funcional pero sin perder las declaraciones estáticas de Java. Imponemos esta última restricción para hacer que la reformulación del código sea más fácil y segura, y dejar que el compilador haga su trabajo.

h2. <a>Vamos a usar lambdaj</a>

Comenzaremos con una aplicación nueva que muestra un catálogo de carros. La clase @Car@ (_Carro_) del modelo se muestra a continuación:

bc. package models;
 
import play.*;
import play.db.jpa.*;
 
import javax.persistence.*;
import java.util.*;
 
@Entity
public class Car extends Model {
    
    public String name;
    public String brand;
    public int numberOfViews;
    public Date lastViewed;
    
    @Transient
    public double price;
    
    public Car viewed() {
        lastViewed = new Date();
        numberOfViews++;
        return this;
    }
    
}

Y vamos a escribir una simple acción que recupere de la base de datos todos los carros:

bc. public static index() {
    List<Car> cars = Car.find().fetch();
    render(cars);
}

Ahora en la página sería grandioso poder ordenar todos estos carros según la marca, por lo que necesitamos extraer las marcas de la lista de carros. Vamos a hacerlo al estilo lambdaj:

bc. List<String> brands = collect(cars, on(Car.class).brand);

Esta línea recorrerá la lista de carros, recolectará todas las marcas y las almacenerá en la lista devuelta. Lo bueno es que somos capaces de expresar todo esto usando tipos estáticos.

Ahora necesitamos filtrar esta lista para remover las marcas duplicadas:

bc. Collection<String> brands = selectDistinct(
    collect(cars, on(Car.class).brand)
);

Muy fácil.

h2. <a>Invocando métodos por lote</a>

Queremos contar cada vez que un carro es visto, y recordar la hora y fecha en que fue visto la última vez. Como ya tenemos el método @viewed()@ que se encarga de actualizar los objetos @Car@, solo necesitamos llamarlo desde cada carro obtenido de la base de datos. De nuevo, vamos hacerlo al estilo lambdaj:

bc. forEach(cars).viewed();

Esta línea recorrerá la lista de objetos @Car@ y llamará al método @viewed()@ desde cada uno de los objetos.

Y debido a que modificamos el estado de objetos persistentes, necesitamos guardarlos. Así que reescribiremos la instrucción anterior:

bc. forEach(cars).viewed().save();

h2. <a>Usando cierres</a>

¿Ah? ¡Pero Java no tiene cierres! Espera, lambdaj llena parcialmente este vacío con una característica que le permite definir, en su estilo DSL tradicional, funciones de primera clase con variables libres.

Vamos a suponer que tenemos una utilidad @PriceWatcher@ capaz de buscar en tiempo real el precio de un carro.

bc. package models;
 
public class PriceWatcher {
 
    public void setPrice(Car car) {
        // retrieve the correct price here
        car.price = currentPrice;
    }
    
}

Debido a que estos datos necesitan ser **en tiempo real** no queremos almacenarlos en la base de datos. Antes de mostrar la lista de carros necesitamos crear un objeto @PriceWatcher@ y pedirle que busque el precio actual de cada carro. De nuevo, vamos a hacerlo al estilo lambdaj:

bc. PriceWatcher priceWatcher = new PriceWatcher();
Car.forEach(cars); {
    of(priceWatcher).setPrice(var(Car.class));
}

Definimos una función con una variable libre, y luego le pedimos a la clase @Car@ que la llamara por cada elemento de la lista @cars@.

h2. <a>El código definitivo de la accion</a>

Usando todas estas cosas buenas de lambdaj, podemos finalmente escribir la acción @index@ de una forma muy expresiva:

bc. public static void index() {
    List<Car> cars = Car.find().fetch();
    
    // Recolectar las marcas
    Collection<String> brands = selectDistinct(
        collect(cars, on(Car.class).brand)
    );   
    
    // Establecer todos estos carros como vistos
    forEach(cars).viewed().save();
    
    // Actualizar los precios
    PriceWatcher priceWatcher = new PriceWatcher();
    Car.forEach(cars); {
        of(priceWatcher).update(var(Car.class));
    }
        
    render(cars, brands);
}

