p(note). Esta página todavía no ha sido traducida al castellano. Si quieres colaborar con nosotros y ayudar con la traducción lee nuestra "guía para colaborar con la traducción de play":translation.

h1. Administrando las dependencias

El sistema de administración de dependencias de Play, nos permite expresar las dependencias externas de nuestra aplicación en un sólo archivo @dependencies.yml@.

Una aplicación Play puede tener 3 tipos de dependencias:

* El mismo framework Play, ya que una aplicación Play siempre depende del framework Play.
* Cualquier librería Java, instalada como un archivo **JAR** en el directorio @lib/@ de tu aplicación.
* Un módulo Play (de hecho, un fragmento de una aplicación) instalado en el directorio @modules/@ de tu aplicación.

Una vez que has expresado éstas dependencias en el archivo @conf/dependencies.yml@ de tu aplicación, Play resolverá, descargará e instalará todas las dependencias requeridas. 

h2. <a name="format">El formato de las dependencias</a>

Una dependendencia se describe como una organización, un nombre, y un número de revisión. En el archivo @dependencies.yml@ deberás escribirla así:

bc. organisation -> name revision

Entonces, por ejemplo para la versión 1.0 del "Módulo PDF Play":http://www.playframework.org/modules/pdf se expresaría así:

bc. play -> pdf 1.0

A veces, el nombre de la organización coincide con el nombre de la dependencia, como en el caso de "commons-lang":http://commons.apache.org/lang/:

bc. commons-lang -> commons-lang 2.5

En éste caso, puedes omitir el nombre de la organización y dejar sólo la dependencia:

bc. commons-lang 2.5

h3. Revisiones dinámicas

Una revisión puede ser estática (1.2, por ejemplo) o dinámica. Una revisión dinámica expresa un rango de revisiones permitidas.

Por ejemplo:

* @[1.0,2.0]@ concuerda con todas las versiones mayores o iguales que 1.0 y menores o iguales que 2.0
* @[1.0,2.0[@ concuerda con todas las versiones mayores o iguales que 1.0 y menores que 2.0
* @]1.0,2.0]@ concuerda con todas las versiones mayores que 1.0 y menores o iguales que 2.0
* @]1.0,2.0[@concuerda con todas las versiones mayores que 1.0 y menores que 2.0
* @[1.0,)@ concuerda con todas las versiones mayores o iguales que 1.0
* @]1.0,)@ concuerda con todas las versiones mayores que 1.0
* @(,2.0]@ concuerda con todas las versiones menores o iguales que 2.0
* @(,2.0[@ * @(,2.0[@ concuerda con todas las versiones menores que 2.0

h2. <a name="yml">dependencies.yml</a>

Cuando creas una nueva aplicación, un descriptor @dependencies.yml@ es creado automáticamente en el directorio @conf/@:

bc. # Dependencias de aplicaciones
    
require:
    - play 1.2

La sección @require@ muestra una lista de todas las dependencias necesarias por tu aplicación. Aquí, la nueva aplicación solo depende de **Play versión 1.2**. Pero imaginemos que tu aplicación necesita "Google Guava":http://code.google.com/p/guava-libraries/; you would have:

bc. # Dependencias de aplicaciones
    
require:
    - play 1.2
    - com.google.guava -> guava r07

h3. El comando ‘play dependencies’

Para pedirle a Play que resuelva, descargue e instale las nuevas dependencias, ejecuta @play dependencies@:

bc. $ play dependencies
~        _            _ 
~  _ __ | | __ _ _  _| |
~ | '_ \| |/ _' | || |_|
~ |  __/|_|\____|\__ (_)
~ |_|            |__/   s
~
~ play! 1.2, http://www.playframework.org
~ framework ID is gbo
~
~ Resolving dependencies using ~/Documents/coco/conf/dependencies.yml,
~
~ 	com.google.guava->guava r07 (from mavenCentral)
~ 	com.google.code.findbugs->jsr305 1.3.7 (from mavenCentral)
~
~ Downloading required dependencies,
~
~ 	downloaded http://repo1.maven.org/maven2/com/google/guava/guava/r07/guava-r07.jar
~ 	downloaded http://repo1.maven.org/maven2/com/google/code/findbugs/jsr305/1.3.7/jsr305-1.3.7.jar
~
~ Installing resolved dependencies,
~
~ 	lib/guava-r07.jar
~ 	lib/jsr305-1.3.7.jar
~
~ Done!
~

Ahora Play ha descargado dos archivos JAR (**guava-r07.jar**, **jsr305-1.3.7.jar**) del repositorio Maven central, y los ha instalado en el directorio @lib/@.

Pero, ¿Por qué dos JAR, si sólo declaramos una dependencia? Porque Google Guava tiene una dependencia transitiva. En realidad, ésta dependencia no es necesaria realmente y nos gustaría excluírla.

h3. Dependencias transitivas

Las dependencias transitivas son agregadas por defecto. Pero existen varias maneras de excluírlas si es necesario.

1. Puedes deshabilitar las dependencias transitivas para una dependencia en particular:

bc. # Application dependencies
    
require:
    - play 1.2
    - com.google.guava -> guava r07:
        transitive: false

2. Puedes deshabilitar las dependencias transitivas para el proyecto completo:

bc. # Application dependencies
    
transitiveDependencies: false    
    
require:
    - play 1.2
    - com.google.guava -> guava r07

3. Puedes excluir una dependencia específica explicitamente:

bc. # Application dependencies
    
require:
    - play 1.2
    - com.google.guava -> guava r07:
        exclude:
            - com.google.code.findbugs -> *

h3. Mantiene los directorios lib/ y modulces/ sincronizados

Ahora, si ejecutas nuevamente @play dependencies@, la dependencia findbugs será omitida:

bc. $ play deps
~        _            _ 
~  _ __ | | __ _ _  _| |
~ | '_ \| |/ _' | || |_|
~ |  __/|_|\____|\__ (_)
~ |_|            |__/   
~
~ play! 1.2, http://www.playframework.org
~ framework ID is gbo
~
~ Resolving dependencies using ~/Documents/coco/conf/dependencies.yml,
~
~ 	com.google.guava->guava r07 (from mavenCentral)
~
~ Installing resolved dependencies,
~
~ 	lib/guava-r07.jar
~
~ ********************************************************************
~ WARNING: Your lib/ and modules/ directories and not synced with 
~ current dependencies (use --sync to automatically delete them)
~
~ 	Unknown: ~/Documents/coco/lib/jsr305-1.3.7.jar
~ ********************************************************************
~
~ Done!
~

Igualmente, el archivo **jsr305-1.3.7.jar** descargado antes, todavía está presente en el directorio @lib/@ de nuestra aplicación.

Para mantener los directorios @lib/@ y @modules/@ sincronizados con el sistema de administración de dependencias, puedes agregar el comando @--sync@ al comando @dependencies@:

bc. play dependencies --sync

Si ejectuas el comando de nuevo, los archivos **JAR** ignorados serán eliminados.

Cuando pasas a producción una aplicación, puedes reducir el tamaño de los módulos eliminando los códigos fuente y la documentación. Puedes hacer ésto agregando la opción @--forProd@ al comando:

bc. play dependencies --forProd

Así eliminarás los directorios @documentation/@, @src/@, @tmp/@, @*sample*/@ y @*test*/@ de cada módulo.

h2. <a name="conflicts">Resolución de conflictos</a>

Cuando dos componentes necesitan diferentes revisiones de la misma dependencia, el administrador de conflictos deberá elegir alguno. Por defecto, se quedará con la revisión más actual e ignorará a las restantes.

Pero hay una excepción. Cuando una dependencia del núcleo del propio framework Play se encuentra en conflicto, la versión disponible en @$PLAY/framework/lib@ será la preferida. Por ejemplo, Play depende de @commons-lang 2.5@ pero si tu aplicación requiere @commons-lang 3.0@:

bc. # Application dependencies
    
require:
    - play 1.2
    - com.google.guava -> guava r07:
        transitive: false
    - commons-lang 3.0

Running @play dependencies@ will evict @commons-lang 3.0@ even if this version is newer:

bc. play dependencies
~        _            _ 
~  _ __ | | __ _ _  _| |
~ | '_ \| |/ _' | || |_|
~ |  __/|_|\____|\__ (_)
~ |_|            |__/   
~
~ play! 1.2, http://www.playframework.org
~ framework ID is gbo
~
~ Resolving dependencies using ~/Documents/coco/conf/dependencies.yml,
~
~ 	com.google.guava->guava r07 (from mavenCentral)
~
~ Some dependencies have been evicted,
~
~	commons-lang 3.0 is overriden by commons-lang 2.5
~
~ Installing resolved dependencies,
~
~ 	lib/guava-r07.jar
~
~ Done!
~

Además, nota que las dependencias disponibles en @$PLAY/framework/lib@ no serán instaladas en el directorio @lib/@ de tu aplicación.

Algunas veces desearás forzar una versión específica de una dependencia, ya sea para sobreescribir una dependencia del núcleo o para elegir una versión distinta a la última disponible.

Entonces puedes especificar la opción @force@ en cualquier dependencia:

bc. # Application dependencies
    
require:
    - play 1.2
    - com.google.guava -> guava r07:
        transitive: false
    - commons-lang 3.0:
        force: true

h2. <a name="repositories">Agregando nuevos repositorios</a>

Por defecto, Play buscará las dependencias **JAR** en el "Repositorio Central Maven":http://repo1.maven.org/maven2/, y buscará **Play modules** en el "Repositorio central de módulos Play":http://www.playframework.org/modules. 

Claro que también puedes especificar nuevos repositorios en la sección:

bc. # Application dependencies
    
require:
    - play 1.2
    - com.google.guava -> guava r07:
        transitive: false
    - commons-lang 3.0:
        force: true
    - com.zenexity -> sso 1.0
        
# My custom repositories
repositories:
    
    - zenexity:
        type:       http
        artifact:   "http://www.zenexity.com/repo/[module]-[revision].[ext]"
        contains:
            - com.zenexity -> *

Utilizando ésta configuración, todas las dependencias de la organización @com.zenexity@ serán descargadas de un servidor HTTP remoto.

h3. Repositorios Maven

También puedes agregar repositorios compatibles con maven2 utilizando el tipo @iBiblio@ así:

bc. # Application dependencies
    
require:
    - play
    - play -> scala 0.8
    - org.jbpm -> jbpm-persistence-jpa 5.0.0:
        exclude:
            - javassist -> javassist *
            - org.hibernate -> hibernate-annotations *
            - javax.persistence -> persistence-api *
repositories:
    - jboss:
        type: iBiblio
        root: "http://repository.jboss.org/nexus/content/groups/public-jboss/"
        contains:
            - org.jbpm -> *
            - org.drools -> *

h3. Repositorios locales

Finalmente y probablemente lo más importante, podríamos querer definir un repositorio que haga referencia a módulos locales. Con éste escenario, las dependencias funcionan casi como la resolución que utiliza el módulo @application.conf@ (ahora obsoleta).

Entonces dada la siguiente estructura de carpetas,

bc. myplayapp/
myfirstmodule/
mysecondmodule/

El siguiente archivo @myplayapp/conf/depencencies.yml@ logrará nuestro objetivo.

bc. # Application dependencies
    
require:
    - play
    - myfirstmodule -> myfirstmodule
    - mysecondmodule -> mysecondmodule
    
repositories:
    - My modules:
        type:       local
        artifact:   ${application.path}/../[module]
        contains:
            - myfirstmodule
            - mysecondmodule

Note: No olvides ejecutar @play dependencies myplayapp@.


h3. Configuración personalizada de Ivy

Play utiliza Ivy. Si deseas alguna configuración especial para un proxy ó autenticación básica para el nexo con un repositorio maven interno, puedes editar el archivo ivysettings.xml que se encuentra en la carpeta @.ivy2@ en tu directorio home.

Ejemplo 1, deseas que Ivy ignore checksums:

bc. <!-- .ivy2/ivysettings.xml -->
<ivysettings>
  <property name="ivy.checksums" value=""/>
</ivysettings>

Ejemplo 2, deseas utilizar autenticación básica:

bc. <!-- .ivy2/ivysettings.xml -->
<ivysettings>
  <credentials host="maven-repo.xxx" realm="Sonatype Nexus Repository Manager"
    username="user" passwd="reallygreatpassword"/>
</ivysettings>

Ejemplo 3, reutilizar el repositorio local maven y el repositorio manager:

bc. <!-- .ivy2/ivysettings.xml -->
<ivy-settings>
  <!-- path to local maven repo and default maven layout -->
  <property name="local-maven2-pattern" 
    value="${user.home}/.m2/repository/[organisation]/[module]/[revision]/[module]-[revision]" 
    override="false" />
 
  <!-- set resolver chain as default -->
  <settings defaultResolver="main" />
 
  <!-- configure caches -->
  <caches repositoryCacheDir="${user.home}/.ivy2/cache">
    <!-- do not cache from local .m2-->
    <cache name="nocache" useOrigin="true" />
    <cache name="default" />
  </caches>
 
  <resolvers>
    <chain name="main">
      <!-- as this is not cached, even changing SNAPSHOT dependencies 
        are resolved correctly -->
      <filesystem name="local-maven-2" m2compatible="true" local="true" 
        cache="nocache">
        <ivy pattern="${local-maven2-pattern}.pom" />
        <artifact pattern="${local-maven2-pattern}(-[classifier]).[ext]" />
      </filesystem>
      <!-- use repository manager as proxy to maven-central
        (and all other repositories)--> 
      <ibiblio name="repomanager" m2compatible="true"
        root="http://your.repomanager.intra/path/to/repo" cache="default"/>
    </chain>
  </resolvers>
</ivy-settings>

Hay varias cosas que puedes configurar: chequea la "Documentación de configuración de Ivy":http://ant.apache.org/ivy/history/2.1.0/settings.html.

h3. Limpiano la caché de Ivy

La caché de Ivy puede volverse corrupta, especialmente cuando utilizamos el tipo @http@ en la sección de repositorios de @conf/dependencies.yml@. Si ésto sucede, y la resolución de dependencias no funciona, puedes limpiar la caché con la opción @--clearcache@.

bc. $ play dependencies --clearcache

Esto es quivalente a @rm -r ~/.ivy2/cache@.


p(note). **Continuamos con la discusión**

Next: %(next)"Evolución de las bases de datos":evolutions%.
